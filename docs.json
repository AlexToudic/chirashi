[
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Variable true if the device is running Android based on User Agent.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 68,
                  "offset": 67
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 68,
              "offset": 67
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 68,
          "offset": 67
        }
      }
    },
    "tags": [],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 3,
        "column": 74
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 4,
          "column": 35
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/browser/isAndroid.js",
      "code": "import ua from './ua'\n\n/** Variable true if the device is running Android based on User Agent. */\nvar isAndroid = /android/i.test(ua)\n\nexport default isAndroid\n"
    },
    "name": "isAndroid",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "isAndroid"
      }
    ],
    "namespace": "isAndroid"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Variable true if the device is an Android Tablet based on User Agent.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 70,
                  "offset": 69
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 70,
              "offset": 69
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 70,
          "offset": 69
        }
      }
    },
    "tags": [],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 4,
        "column": 76
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 5,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 54
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/browser/isAndroidTablet.js",
      "code": "import ua        from './ua'\nimport isAndroid from './isAndroid'\n\n/** Variable true if the device is an Android Tablet based on User Agent. */\nvar isAndroidTablet = isAndroid && !/mobile/i.test(ua)\n\nexport default isAndroidTablet\n"
    },
    "name": "isAndroidTablet",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "isAndroidTablet"
      }
    ],
    "namespace": "isAndroidTablet"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Variable true if the browser is Chrome or Chromium based on User Agent.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 72,
                  "offset": 71
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 72,
              "offset": 71
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 72,
          "offset": 71
        }
      }
    },
    "tags": [],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 4,
        "column": 78
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 5,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 71
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/browser/isChrome.js",
      "code": "import ua     from './ua'\nimport vendor from './vendor'\n\n/** Variable true if the browser is Chrome or Chromium based on User Agent. */\nvar isChrome = /chrome|chromium/i.test(ua) && /google inc/.test(vendor)\n\nexport default isChrome\n"
    },
    "name": "isChrome",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "isChrome"
      }
    ],
    "namespace": "isChrome"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Variable true if the browser is Firefox based on User Agent.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 61,
                  "offset": 60
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 61,
              "offset": 60
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 61,
          "offset": 60
        }
      }
    },
    "tags": [],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 3,
        "column": 67
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 4,
          "column": 35
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/browser/isFirefox.js",
      "code": "import ua from './ua'\n\n/** Variable true if the browser is Firefox based on User Agent. */\nvar isFirefox = /firefox/i.test(ua)\n\nexport default isFirefox\n"
    },
    "name": "isFirefox",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "isFirefox"
      }
    ],
    "namespace": "isFirefox"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Version number if the browser is Internet Explorer or false based on User Agent.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 81,
                  "offset": 80
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 81,
              "offset": 80
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 81,
          "offset": 80
        }
      }
    },
    "tags": [],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 3,
        "column": 87
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 4,
          "column": 81
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/browser/isIE.js",
      "code": "import ua from './ua'\n\n/** Version number if the browser is Internet Explorer or false based on User Agent. */\nvar isIE = (ua.indexOf('msie') != -1) ? parseInt(ua.split('msie')[1], 10) : false\n\nexport default isIE\n"
    },
    "name": "isIE",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "isIE"
      }
    ],
    "namespace": "isIE"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Variable true if the device is running iOS based on User Agent.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 64,
                  "offset": 63
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 64,
              "offset": 63
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 64,
          "offset": 63
        }
      }
    },
    "tags": [],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 3,
        "column": 70
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 4,
          "column": 40
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/browser/isIOS.js",
      "code": "import ua from './ua'\n\n/** Variable true if the device is running iOS based on User Agent. */\nvar isIOS = /iphone|ipad|ipod/i.test(ua)\n\nexport default isIOS\n"
    },
    "name": "isIOS",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "isIOS"
      }
    ],
    "namespace": "isIOS"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Variable true if the device is an iPad based on User Agent.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 60,
                  "offset": 59
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 60,
              "offset": 59
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 60,
          "offset": 59
        }
      }
    },
    "tags": [],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 3,
        "column": 66
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 4,
          "column": 29
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/browser/isIPad.js",
      "code": "import ua from './ua'\n\n/** Variable true if the device is an iPad based on User Agent. */\nvar isIPad = /ipad/i.test(ua)\n\nexport default isIPad\n"
    },
    "name": "isIPad",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "isIPad"
      }
    ],
    "namespace": "isIPad"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Variable true if the device is an iPhone based on User Agent.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 62,
                  "offset": 61
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 62,
              "offset": 61
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 62,
          "offset": 61
        }
      }
    },
    "tags": [],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 3,
        "column": 68
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 4,
          "column": 33
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/browser/isIPhone.js",
      "code": "import ua from './ua'\n\n/** Variable true if the device is an iPhone based on User Agent. */\nvar isIPhone = /iphone/i.test(ua)\n\nexport default isIPhone\n"
    },
    "name": "isIPhone",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "isIPhone"
      }
    ],
    "namespace": "isIPhone"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Variable true if the device is an iPod based on User Agent.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 60,
                  "offset": 59
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 60,
              "offset": 59
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 60,
          "offset": 59
        }
      }
    },
    "tags": [],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 3,
        "column": 66
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 4,
          "column": 29
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/browser/isIPod.js",
      "code": "import ua from './ua'\n\n/** Variable true if the device is an iPod based on User Agent. */\nvar isIPod = /ipod/i.test(ua)\n\nexport default isIPod\n"
    },
    "name": "isIPod",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "isIPod"
      }
    ],
    "namespace": "isIPod"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Variable true if the device is a mobile based on User Agent.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 61,
                  "offset": 60
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 61,
              "offset": 60
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 61,
          "offset": 60
        }
      }
    },
    "tags": [],
    "loc": {
      "start": {
        "line": 6,
        "column": 0
      },
      "end": {
        "line": 6,
        "column": 67
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 7,
          "column": 0
        },
        "end": {
          "line": 7,
          "column": 63
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/browser/isMobile.js",
      "code": "import isIOS       from './isIOS'\nimport isAndroid   from './isAndroid'\nimport isWindows   from './isWindows'\nimport isTouchable from './isTouchable'\n\n/** Variable true if the device is a mobile based on User Agent. */\nvar isMobile = isIOS || isAndroid || (isWindows && isTouchable)\n\nexport default isMobile\n"
    },
    "name": "isMobile",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "isMobile"
      }
    ],
    "namespace": "isMobile"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Variable true if the browser is Safari based on User Agent.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 60,
                  "offset": 59
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 60,
              "offset": 59
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 60,
          "offset": 59
        }
      }
    },
    "tags": [],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 4,
        "column": 66
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 5,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 66
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/browser/isSafari.js",
      "code": "import ua     from './ua'\nimport vendor from './vendor'\n\n/** Variable true if the browser is Safari based on User Agent. */\nvar isSafari = /safari/i.test(ua) && /apple computer/.test(vendor)\n\nexport default isSafari\n"
    },
    "name": "isSafari",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "isSafari"
      }
    ],
    "namespace": "isSafari"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Variable true if the device is a tablet based on User Agent.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 61,
                  "offset": 60
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 61,
              "offset": 60
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 61,
          "offset": 60
        }
      }
    },
    "tags": [],
    "loc": {
      "start": {
        "line": 5,
        "column": 0
      },
      "end": {
        "line": 5,
        "column": 67
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 6,
          "column": 0
        },
        "end": {
          "line": 6,
          "column": 59
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/browser/isTablet.js",
      "code": "import isIPad          from './isIPad'\nimport isAndroidTablet from './isAndroidTablet'\nimport isWindowsTablet from './isWindowsTablet'\n\n/** Variable true if the device is a tablet based on User Agent. */\nvar isTablet = isIPad || isAndroidTablet || isWindowsTablet\n\nexport default isTablet\n"
    },
    "name": "isTablet",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "isTablet"
      }
    ],
    "namespace": "isTablet"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Variable true if the device handle touches events.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 51,
                  "offset": 50
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 51,
              "offset": 50
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 51,
          "offset": 50
        }
      }
    },
    "tags": [],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 1,
        "column": 57
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 109
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/browser/isTouchable.js",
      "code": "/** Variable true if the device handle touches events. */\nvar isTouchable = !!(('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch)\n\nexport default isTouchable\n"
    },
    "name": "isTouchable",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "isTouchable"
      }
    ],
    "namespace": "isTouchable"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Variable true if the device is running Windows based on User Agent.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 68,
                  "offset": 67
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 68,
              "offset": 67
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 68,
          "offset": 67
        }
      }
    },
    "tags": [],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 1,
        "column": 74
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 137
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/browser/isWindows.js",
      "code": "/** Variable true if the device is running Windows based on User Agent. */\nvar isWindows = /win/i.test('navigator' in window && 'appVersion' in window.navigator && window.navigator.appVersion.toLowerCase() || '')\n\nexport default isWindows\n"
    },
    "name": "isWindows",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "isWindows"
      }
    ],
    "namespace": "isWindows"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Variable true if the device is a Windows Phone based on User Agent.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 68,
                  "offset": 67
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 68,
              "offset": 67
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 68,
          "offset": 67
        }
      }
    },
    "tags": [],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 4,
        "column": 74
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 5,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 51
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/browser/isWindowsPhone.js",
      "code": "import ua        from './ua'\nimport isWindows from './isWindows'\n\n/** Variable true if the device is a Windows Phone based on User Agent. */\nvar isWindowsPhone = isWindows && /phone/i.test(ua)\n\nexport default isWindowsPhone\n"
    },
    "name": "isWindowsPhone",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "isWindowsPhone"
      }
    ],
    "namespace": "isWindowsPhone"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Variable true if the device is a Windows Tablet based on User Agent.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 69,
                  "offset": 68
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 69,
              "offset": 68
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 69,
          "offset": 68
        }
      }
    },
    "tags": [],
    "loc": {
      "start": {
        "line": 5,
        "column": 0
      },
      "end": {
        "line": 5,
        "column": 75
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 6,
          "column": 0
        },
        "end": {
          "line": 6,
          "column": 65
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/browser/isWindowsTablet.js",
      "code": "import isWindows      from './isWindows'\nimport isWindowsPhone from './isWindowsPhone'\nimport isTouchable    from './isTouchable'\n\n/** Variable true if the device is a Windows Tablet based on User Agent. */\nvar isWindowsTablet = isWindows && !isWindowsPhone && isTouchable\n\nexport default isWindowsTablet\n"
    },
    "name": "isWindowsTablet",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "isWindowsTablet"
      }
    ],
    "namespace": "isWindowsTablet"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Browser prefix for styling.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 28,
                  "offset": 27
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 28,
              "offset": 27
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 28,
          "offset": 27
        }
      }
    },
    "tags": [],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 1,
        "column": 34
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 6,
          "column": 4
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/browser/prefix.js",
      "code": "/** Browser prefix for styling. */\nvar prefix = (Array.prototype.slice\n  .call(window.getComputedStyle(document.documentElement, ''))\n  .join('')\n  .match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])\n)[1]\n\nexport default prefix\n"
    },
    "name": "prefix",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "prefix"
      }
    ],
    "namespace": "prefix"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Variable true if the browser supports 3D css transformations.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 62,
                  "offset": 61
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 62,
              "offset": 61
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 62,
          "offset": 61
        }
      }
    },
    "tags": [],
    "loc": {
      "start": {
        "line": 5,
        "column": 0
      },
      "end": {
        "line": 5,
        "column": 68
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 6,
          "column": 0
        },
        "end": {
          "line": 6,
          "column": 63
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/browser/support3D.js",
      "code": "import prefix from './prefix'\n\ndocument.documentElement.style[prefix+'matrix'] = 'matrix3D(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)'\n\n/** Variable true if the browser supports 3D css transformations. */\nvar support3D = document.documentElement.style[prefix+'matrix']\n\ndocument.documentElement.style[prefix+'matrix'] = ''\n\nexport default support3D\n"
    },
    "name": "support3D",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "support3D"
      }
    ],
    "namespace": "support3D"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "User Agent in lower case.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 26,
                  "offset": 25
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 26,
              "offset": 25
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 26,
          "offset": 25
        }
      }
    },
    "tags": [],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 1,
        "column": 32
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 42
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/browser/ua.js",
      "code": "/** User Agent in lower case. */\nvar ua = navigator.userAgent.toLowerCase()\nexport default ua\n"
    },
    "name": "ua",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "ua"
      }
    ],
    "namespace": "ua"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Navigator's vendor in lower case.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 34,
                  "offset": 33
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 34,
              "offset": 33
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 34,
          "offset": 33
        }
      }
    },
    "tags": [],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 1,
        "column": 40
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 63
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/browser/vendor.js",
      "code": "/** Navigator's vendor in lower case. */\nvar vendor = navigator.vendor && navigator.vendor.toLowerCase()\n\nexport default vendor\n"
    },
    "name": "vendor",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "vendor"
      }
    ],
    "namespace": "vendor"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Callback to apply on item.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 27,
                  "offset": 26
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 27,
              "offset": 26
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 27,
          "offset": 26
        }
      }
    },
    "tags": [
      {
        "title": "callback",
        "description": "forEachCallback",
        "lineNumber": 2
      },
      {
        "title": "param",
        "description": null,
        "lineNumber": 3,
        "type": {
          "type": "AllLiteral"
        },
        "name": "item"
      },
      {
        "title": "param",
        "description": "Index of item in items.",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "index"
      }
    ],
    "loc": {
      "start": {
        "line": 60,
        "column": 0
      },
      "end": {
        "line": 65,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 38,
          "column": 0
        },
        "end": {
          "line": 58,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/core/forEach.js"
    },
    "kind": "typedef",
    "name": "forEachCallback",
    "type": {
      "type": "NameExpression",
      "name": "Function"
    },
    "params": [
      {
        "name": "item",
        "lineNumber": 3,
        "type": {
          "type": "AllLiteral"
        }
      },
      {
        "name": "index",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Index of item in items.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 24,
                      "offset": 23
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 24,
                  "offset": 23
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 24,
              "offset": 23
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "number"
        }
      }
    ],
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "forEachCallback",
        "kind": "typedef"
      }
    ],
    "namespace": "forEachCallback"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Iterates over items and apply callback on each one.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 52,
                  "offset": 51
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 52,
              "offset": 51
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 52,
          "offset": 51
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable.",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "items"
      },
      {
        "title": "param",
        "description": "The callback to call for each iteratee.",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "forEachCallback"
        },
        "name": "callback"
      },
      {
        "title": "param",
        "description": "Respect items order.",
        "lineNumber": 4,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "bool"
          }
        },
        "name": "forceOrder",
        "default": "false"
      },
      {
        "title": "return",
        "description": "items for chaining.",
        "lineNumber": 5,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "title": "example",
        "description": "esnext\nimport { forEach } from 'chirashi'\n\nconst items = forEach([0, 1, 2], (item, i) => console.log(`${i}: ${item + 1}`))\n// logs:\n//   2: 3\n//   1: 2\n//   0: 1\nitems // [0, 1, 2]\nforEach(items, (item, i) => console.log(`${i}: ${item + 1}`), true)\n// logs:\n//   0: 1\n//   1: 2\n//   2: 3",
        "lineNumber": 6
      },
      {
        "title": "example",
        "description": "es5\nvar items = Chirashi.forEach([0, 1, 2], function (item, i) { console.log(i+': '+(item + 1)) })\n// logs:\n//   2: 3\n//   1: 2\n//   0: 1\nitems // [0, 1, 2]\nChirashi.forEach(items, function (item, i) { console.log(i+': '+(item + 1)) }, true)\n// logs:\n//   0: 1\n//   1: 2\n//   2: 3",
        "lineNumber": 20
      }
    ],
    "loc": {
      "start": {
        "line": 5,
        "column": 0
      },
      "end": {
        "line": 37,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 38,
          "column": 0
        },
        "end": {
          "line": 58,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/core/forEach.js",
      "code": "import getSelectorAll from './getSelectorAll'\nimport getElement     from './getElement'\nimport isDomElement   from './isDomElement'\n\n/**\n * Iterates over items and apply callback on each one.\n * @param {string | Array | NodeList | HTMLCollection} items - The iterable.\n * @param {forEachCallback} callback - The callback to call for each iteratee.\n * @param {bool} [forceOrder=false] - Respect items order.\n * @return {string | Array | NodeList | HTMLCollection} items for chaining.\n * @example //esnext\n * import { forEach } from 'chirashi'\n *\n * const items = forEach([0, 1, 2], (item, i) => console.log(`${i}: ${item + 1}`))\n * // logs:\n * //   2: 3\n * //   1: 2\n * //   0: 1\n * items // [0, 1, 2]\n * forEach(items, (item, i) => console.log(`${i}: ${item + 1}`), true)\n * // logs:\n * //   0: 1\n * //   1: 2\n * //   2: 3\n * @example //es5\n * var items = Chirashi.forEach([0, 1, 2], function (item, i) { console.log(i+': '+(item + 1)) })\n * // logs:\n * //   2: 3\n * //   1: 2\n * //   0: 1\n * items // [0, 1, 2]\n * Chirashi.forEach(items, function (item, i) { console.log(i+': '+(item + 1)) }, true)\n * // logs:\n * //   0: 1\n * //   1: 2\n * //   2: 3\n */\nexport default function forEach (items, callback, forceOrder = false) {\n    if (!items) return\n\n    if (!(items instanceof Array || items instanceof NodeList || items instanceof HTMLCollection)) {\n        callback(items, 0)\n    }\n    else {\n        if (!forceOrder) {\n            let i = items.length\n            while(i--) callback(items[i], i)\n        }\n        else {\n            let i = -1, len = items.length\n            while(++i < len) {\n                callback(items[i], i)\n            }\n        }\n    }\n\n    return items\n}\n\n/**\n * Callback to apply on item.\n * @callback forEachCallback\n * @param {*} item\n * @param {number} index - Index of item in items.\n */\n"
    },
    "params": [
      {
        "name": "items",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "callback",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The callback to call for each iteratee.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 40,
                      "offset": 39
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 40,
                  "offset": 39
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 40,
              "offset": 39
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "forEachCallback"
        }
      },
      {
        "name": "forceOrder",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Respect items order.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 21,
                      "offset": 20
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 21,
                  "offset": 20
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 21,
              "offset": 20
            }
          }
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "bool"
          }
        },
        "default": "false"
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "items for chaining.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 20,
                      "offset": 19
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 20,
                  "offset": 19
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 20,
              "offset": 19
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "examples": [
      {
        "description": "esnext\nimport { forEach } from 'chirashi'\n\nconst items = forEach([0, 1, 2], (item, i) => console.log(`${i}: ${item + 1}`))\n// logs:\n//   2: 3\n//   1: 2\n//   0: 1\nitems // [0, 1, 2]\nforEach(items, (item, i) => console.log(`${i}: ${item + 1}`), true)\n// logs:\n//   0: 1\n//   1: 2\n//   2: 3"
      },
      {
        "description": "es5\nvar items = Chirashi.forEach([0, 1, 2], function (item, i) { console.log(i+': '+(item + 1)) })\n// logs:\n//   2: 3\n//   1: 2\n//   0: 1\nitems // [0, 1, 2]\nChirashi.forEach(items, function (item, i) { console.log(i+': '+(item + 1)) }, true)\n// logs:\n//   0: 1\n//   1: 2\n//   2: 3"
      }
    ],
    "name": "forEach",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "forEach"
      }
    ],
    "namespace": "forEach"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Callback to apply on element.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 30,
                  "offset": 29
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 30,
              "offset": 29
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 30,
          "offset": 29
        }
      }
    },
    "tags": [
      {
        "title": "callback",
        "description": "forElementsCallback",
        "lineNumber": 2
      },
      {
        "title": "param",
        "description": null,
        "lineNumber": 3,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            },
            {
              "type": "NameExpression",
              "name": "Text"
            }
          ]
        },
        "name": "element"
      },
      {
        "title": "param",
        "description": "Index of element in elements.",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "index"
      }
    ],
    "loc": {
      "start": {
        "line": 57,
        "column": 0
      },
      "end": {
        "line": 62,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 53,
          "column": 0
        },
        "end": {
          "line": 55,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/core/forElements.js"
    },
    "kind": "typedef",
    "name": "forElementsCallback",
    "type": {
      "type": "NameExpression",
      "name": "Function"
    },
    "params": [
      {
        "name": "element",
        "lineNumber": 3,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            },
            {
              "type": "NameExpression",
              "name": "Text"
            }
          ]
        }
      },
      {
        "name": "index",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Index of element in elements.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 30,
                      "offset": 29
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 30,
                  "offset": 29
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 30,
              "offset": 29
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "number"
        }
      }
    ],
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "forElementsCallback",
        "kind": "typedef"
      }
    ],
    "namespace": "forElementsCallback"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Iterates over dom elements and apply callback on each one.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 59,
                  "offset": 58
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 59,
              "offset": 58
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 59,
          "offset": 58
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable, selector or elements.",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            },
            {
              "type": "NameExpression",
              "name": "Text"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "The function to call for each element.",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "forElementsCallback"
        },
        "name": "callback"
      },
      {
        "title": "param",
        "description": "Respect elements order.",
        "lineNumber": 4,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "bool"
          }
        },
        "name": "forceOrder",
        "default": "false"
      },
      {
        "title": "return",
        "description": "elements - Array of elements for chaining.",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      },
      {
        "title": "example",
        "description": "<caption id=\"es-next\">\nimport { forElements } from 'chirashi'\nconst div  = document.createElement('div'),\n    div2 = document.createElement('div'),\n    test = document.createElement('div'),\n    test2 = document.createElement('div')\ntest.classList.add('test')\ntest2.classList.add('test2')\nforElements('div', console.log)\n// logs:\n// <div class=\"test2\"></div> 3\n// <div class=\"test\"></div> 2\n// <div></div> 1\n// <div></div> 0\n// returns [<div></div>, <div></div>, <div class=\"test\"></div>, <div class=\"test2\"></div>]\nforElements('.test, .test2', console.log, true)\n// logs:\n// <div class=\"test\"></div> 0\n// <div class=\"test2\"></div> 1\n// returns [<div class=\"test\"></div>, <div class=\"test2\"></div>]\n</caption>\n<caption id=\"es5\">\nvar div  = document.createElement('div'),\n    div2 = document.createElement('div'),\n    test = document.createElement('div'),\n    test2 = document.createElement('div')\ntest.classList.add('test')\ntest2.classList.add('test2')\nChirashi.forElements('div', console.log)\n// logs:\n// <div class=\"test2\"></div> 3\n// <div class=\"test\"></div> 2\n// <div></div> 1\n// <div></div> 0\n// returns [<div></div>, <div></div>, <div class=\"test\"></div>, <div class=\"test2\"></div>]\nChirashi.forElements('.test, .test2', console.log, true)\n// logs:\n// <div class=\"test\"></div> 0\n// <div class=\"test2\"></div> 1\n// returns [<div class=\"test\"></div>, <div class=\"test2\"></div>]\n</caption>",
        "lineNumber": 6
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 52,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 53,
          "column": 0
        },
        "end": {
          "line": 55,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/core/forElements.js",
      "code": "import forEach     from './forEach'\nimport getElements from './getElements'\n\n/**\n * Iterates over dom elements and apply callback on each one.\n * @param {string | Array | NodeList | HTMLCollection | window | document | HTMLElement | SVGElement | Text} elements - The iterable, selector or elements.\n * @param {forElementsCallback} callback - The function to call for each element.\n * @param {bool} [forceOrder=false] - Respect elements order.\n * @return {Array} elements - Array of elements for chaining.\n * @example\n * <caption id=\"es-next\">\n * import { forElements } from 'chirashi'\n * const div  = document.createElement('div'),\n *     div2 = document.createElement('div'),\n *     test = document.createElement('div'),\n *     test2 = document.createElement('div')\n * test.classList.add('test')\n * test2.classList.add('test2')\n * forElements('div', console.log)\n * // logs:\n * // <div class=\"test2\"></div> 3\n * // <div class=\"test\"></div> 2\n * // <div></div> 1\n * // <div></div> 0\n * // returns [<div></div>, <div></div>, <div class=\"test\"></div>, <div class=\"test2\"></div>]\n * forElements('.test, .test2', console.log, true)\n * // logs:\n * // <div class=\"test\"></div> 0\n * // <div class=\"test2\"></div> 1\n * // returns [<div class=\"test\"></div>, <div class=\"test2\"></div>]\n * </caption>\n * <caption id=\"es5\">\n * var div  = document.createElement('div'),\n *     div2 = document.createElement('div'),\n *     test = document.createElement('div'),\n *     test2 = document.createElement('div')\n * test.classList.add('test')\n * test2.classList.add('test2')\n * Chirashi.forElements('div', console.log)\n * // logs:\n * // <div class=\"test2\"></div> 3\n * // <div class=\"test\"></div> 2\n * // <div></div> 1\n * // <div></div> 0\n * // returns [<div></div>, <div></div>, <div class=\"test\"></div>, <div class=\"test2\"></div>]\n * Chirashi.forElements('.test, .test2', console.log, true)\n * // logs:\n * // <div class=\"test\"></div> 0\n * // <div class=\"test2\"></div> 1\n * // returns [<div class=\"test\"></div>, <div class=\"test2\"></div>]\n * </caption>\n */\nexport default function forElements (elements, callback, forceOrder = false) {\n    return forEach(getElements(elements), callback, forceOrder)\n}\n\n/**\n * Callback to apply on element.\n * @callback forElementsCallback\n * @param {window | document | HTMLElement | SVGElement | Text} element\n * @param {number} index - Index of element in elements.\n */\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable, selector or elements.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 36,
                      "offset": 35
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 36,
                  "offset": 35
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 36,
              "offset": 35
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            },
            {
              "type": "NameExpression",
              "name": "Text"
            }
          ]
        }
      },
      {
        "name": "callback",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The function to call for each element.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 39,
                      "offset": 38
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 39,
                  "offset": 38
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 39,
              "offset": 38
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "forElementsCallback"
        }
      },
      {
        "name": "forceOrder",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Respect elements order.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 24,
                      "offset": 23
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 24,
                  "offset": 23
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 24,
              "offset": 23
            }
          }
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "bool"
          }
        },
        "default": "false"
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "elements - Array of elements for chaining.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 43,
                      "offset": 42
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 43,
                  "offset": 42
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 43,
              "offset": 42
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "examples": [
      {
        "description": "<caption id=\"es-next\">\nimport { forElements } from 'chirashi'\nconst div  = document.createElement('div'),\n    div2 = document.createElement('div'),\n    test = document.createElement('div'),\n    test2 = document.createElement('div')\ntest.classList.add('test')\ntest2.classList.add('test2')\nforElements('div', console.log)\n// logs:\n// <div class=\"test2\"></div> 3\n// <div class=\"test\"></div> 2\n// <div></div> 1\n// <div></div> 0\n// returns [<div></div>, <div></div>, <div class=\"test\"></div>, <div class=\"test2\"></div>]\nforElements('.test, .test2', console.log, true)\n// logs:\n// <div class=\"test\"></div> 0\n// <div class=\"test2\"></div> 1\n// returns [<div class=\"test\"></div>, <div class=\"test2\"></div>]\n</caption>\n<caption id=\"es5\">\nvar div  = document.createElement('div'),\n    div2 = document.createElement('div'),\n    test = document.createElement('div'),\n    test2 = document.createElement('div')\ntest.classList.add('test')\ntest2.classList.add('test2')\nChirashi.forElements('div', console.log)\n// logs:\n// <div class=\"test2\"></div> 3\n// <div class=\"test\"></div> 2\n// <div></div> 1\n// <div></div> 0\n// returns [<div></div>, <div></div>, <div class=\"test\"></div>, <div class=\"test2\"></div>]\nChirashi.forElements('.test, .test2', console.log, true)\n// logs:\n// <div class=\"test\"></div> 0\n// <div class=\"test2\"></div> 1\n// returns [<div class=\"test\"></div>, <div class=\"test2\"></div>]\n</caption>"
      }
    ],
    "name": "forElements",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "forElements"
      }
    ],
    "namespace": "forElements"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Iterates over object's keys and apply callback on each one.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 60,
                  "offset": 59
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 60,
              "offset": 59
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 60,
          "offset": 59
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable.",
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "Object"
        },
        "name": "object"
      },
      {
        "title": "param",
        "description": "The function to call for each key-value pair.",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "forInCallback"
        },
        "name": "callback"
      },
      {
        "title": "param",
        "description": "Respect keys order.",
        "lineNumber": 4,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "bool"
          }
        },
        "name": "forceOrder",
        "default": "false"
      },
      {
        "title": "return",
        "description": "object - The iterable for chaining.",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "Object"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 7,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 8,
          "column": 0
        },
        "end": {
          "line": 30,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/core/forIn.js",
      "code": "/**\n * Iterates over object's keys and apply callback on each one.\n * @param {Object} object - The iterable.\n * @param {forInCallback} callback - The function to call for each key-value pair.\n * @param {bool} [forceOrder=false] - Respect keys order.\n * @return {Object} object - The iterable for chaining.\n */\nexport default function forIn(object, callback, forceOrder = false) {\n    if (typeof object != 'object') return\n\n    let keys = Object.keys(object)\n\n    if (!forceOrder) {\n        let i = keys.length\n\n        while(i--) {\n            let key = keys[i]\n            callback(key, object[key])\n        }\n    }\n    else {\n        let i = -1, len = keys.length\n        while(++i < len) {\n            let key = keys[i]\n            callback(key, object[key])\n        }\n    }\n\n    return object\n}\n\n/**\n * Callback to apply on each key-value pair.\n * @callback forInCallback\n * @param {string} key\n * @param {*} value\n */\n"
    },
    "params": [
      {
        "name": "object",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "Object"
        }
      },
      {
        "name": "callback",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The function to call for each key-value pair.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 46,
                      "offset": 45
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 46,
                  "offset": 45
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 46,
              "offset": 45
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "forInCallback"
        }
      },
      {
        "name": "forceOrder",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Respect keys order.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 20,
                      "offset": 19
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 20,
                  "offset": 19
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 20,
              "offset": 19
            }
          }
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "bool"
          }
        },
        "default": "false"
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "object - The iterable for chaining.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 36,
                      "offset": 35
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 36,
                  "offset": 35
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 36,
              "offset": 35
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "Object"
        }
      }
    ],
    "name": "forIn",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "forIn"
      }
    ],
    "namespace": "forIn"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Callback to apply on each key-value pair.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 42,
                  "offset": 41
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 42,
              "offset": 41
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 42,
          "offset": 41
        }
      }
    },
    "tags": [
      {
        "title": "callback",
        "description": "forInCallback",
        "lineNumber": 2
      },
      {
        "title": "param",
        "description": null,
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "key"
      },
      {
        "title": "param",
        "description": null,
        "lineNumber": 4,
        "type": {
          "type": "AllLiteral"
        },
        "name": "value"
      }
    ],
    "loc": {
      "start": {
        "line": 32,
        "column": 0
      },
      "end": {
        "line": 37,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 8,
          "column": 0
        },
        "end": {
          "line": 30,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/core/forIn.js"
    },
    "kind": "typedef",
    "name": "forInCallback",
    "type": {
      "type": "NameExpression",
      "name": "Function"
    },
    "params": [
      {
        "name": "key",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      },
      {
        "name": "value",
        "lineNumber": 4,
        "type": {
          "type": "AllLiteral"
        }
      }
    ],
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "forInCallback",
        "kind": "typedef"
      }
    ],
    "namespace": "forInCallback"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Get Dom Element from iterable or selector.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 43,
                  "offset": 42
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 43,
              "offset": 42
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 43,
          "offset": 42
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector.",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            },
            {
              "type": "NameExpression",
              "name": "Text"
            }
          ]
        },
        "name": "element"
      },
      {
        "title": "return",
        "description": "domElement - The dom element from element.",
        "lineNumber": 3,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            },
            {
              "type": "NameExpression",
              "name": "Text"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 8,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 15,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/core/getElement.js",
      "code": "import isDomElement from './isDomElement'\nimport getSelector  from './getSelector'\n\n/**\n * Get Dom Element from iterable or selector.\n * @param {string | Array | window | document | HTMLElement | SVGElement | Text} element - The iterable or selector.\n * @return {window | document | HTMLElement | SVGElement | Text} domElement - The dom element from element.\n */\nexport default function getElement (element) {\n    if (typeof element == 'string') return getSelector(element)\n\n    if (element instanceof Array) return getElement(element[0])\n\n    return isDomElement(element) ? element : null\n}\n"
    },
    "params": [
      {
        "name": "element",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 26,
                      "offset": 25
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 26,
                  "offset": 25
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 26,
              "offset": 25
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            },
            {
              "type": "NameExpression",
              "name": "Text"
            }
          ]
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "domElement - The dom element from element.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 43,
                      "offset": 42
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 43,
                  "offset": 42
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 43,
              "offset": 42
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            },
            {
              "type": "NameExpression",
              "name": "Text"
            }
          ]
        }
      }
    ],
    "name": "getElement",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "getElement"
      }
    ],
    "namespace": "getElement"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Get recursively dom element from iterable or selector.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 55,
                  "offset": 54
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 55,
              "offset": 54
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 55,
          "offset": 54
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable, selector or elements.",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            },
            {
              "type": "NameExpression",
              "name": "Text"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "return",
        "description": "domElements - The array of dom elements from elements.",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      },
      {
        "title": "example",
        "description": "<caption id=\"es-next\">\nimport { getElements } from 'chirashi'\nconst div  = document.createElement('div'),\n    div2 = document.createElement('div'),\n    test = document.createElement('div'),\n    test2 = document.createElement('div')\ntest.classList.add('test')\ntest2.classList.add('test2')\ngetElements('div') // [<div></div>, <div></div>]\ngetElements('.test, .test2') // [<div class=\"test\"></div>, <div class=\"test2\"></div>]\ngetElements([div, div2, '.test2', '.unknown']) // [<div></div>, <div></div>, <div class=\"test2\"></div>]\ngetElements(['.test', '.test2']) // [<div class=\"test\"></div>, <div class=\"test2\"></div>]\n</caption>\n<caption id=\"es5\">\nvar div  = document.createElement('div'),\n    div2 = document.createElement('div'),\n    test = document.createElement('div'),\n    test2 = document.createElement('div')\ntest.classList.add('test')\ntest2.classList.add('test2')\ndocument.body.appendChild(div)\ndocument.body.appendChild(div2)\ndocument.body.appendChild(test)\ndocument.body.appendChild(test2)\nChirashi.getElements('div') // [<div></div>, <div></div>]\nChirashi.getElements('.test, .test2') // [<div class=\"test\"></div>, <div class=\"test2\"></div>]\nChirashi.getElements([div, div2, '.test2', '.unknown']) // [<div></div>, <div></div>, <div class=\"test2\"></div>]\nChirashi.getElements(['.test', '.test2']) // [<div class=\"test\"></div>, <div class=\"test2\"></div>]\n</caption>",
        "lineNumber": 4
      }
    ],
    "loc": {
      "start": {
        "line": 5,
        "column": 0
      },
      "end": {
        "line": 39,
        "column": 2
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 40,
          "column": 0
        },
        "end": {
          "line": 56,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/core/getElements.js",
      "code": "import forEach        from './forEach'\nimport isDomElement   from './isDomElement'\nimport getSelectorAll from './getSelectorAll'\n\n/**\n* Get recursively dom element from iterable or selector.\n* @param {string | Array | NodeList | HTMLCollection | window | document | HTMLElement | SVGElement | Text} elements - The iterable, selector or elements.\n* @return {Array} domElements - The array of dom elements from elements.\n* @example\n* <caption id=\"es-next\">\n* import { getElements } from 'chirashi'\n* const div  = document.createElement('div'),\n*     div2 = document.createElement('div'),\n*     test = document.createElement('div'),\n*     test2 = document.createElement('div')\n* test.classList.add('test')\n* test2.classList.add('test2')\n* getElements('div') // [<div></div>, <div></div>]\n* getElements('.test, .test2') // [<div class=\"test\"></div>, <div class=\"test2\"></div>]\n* getElements([div, div2, '.test2', '.unknown']) // [<div></div>, <div></div>, <div class=\"test2\"></div>]\n* getElements(['.test', '.test2']) // [<div class=\"test\"></div>, <div class=\"test2\"></div>]\n* </caption>\n* <caption id=\"es5\">\n* var div  = document.createElement('div'),\n*     div2 = document.createElement('div'),\n*     test = document.createElement('div'),\n*     test2 = document.createElement('div')\n* test.classList.add('test')\n* test2.classList.add('test2')\n* document.body.appendChild(div)\n* document.body.appendChild(div2)\n* document.body.appendChild(test)\n* document.body.appendChild(test2)\n* Chirashi.getElements('div') // [<div></div>, <div></div>]\n* Chirashi.getElements('.test, .test2') // [<div class=\"test\"></div>, <div class=\"test2\"></div>]\n* Chirashi.getElements([div, div2, '.test2', '.unknown']) // [<div></div>, <div></div>, <div class=\"test2\"></div>]\n* Chirashi.getElements(['.test', '.test2']) // [<div class=\"test\"></div>, <div class=\"test2\"></div>]\n* </caption>\n*/\nexport default function getElements (elements) {\n    if (typeof elements == 'string') return getSelectorAll(elements)\n\n    if (elements instanceof Array) {\n        let parsedElements = []\n        forEach(elements, element => {\n            let newElements = getElements(element)\n            if (newElements) parsedElements = [...parsedElements, ...newElements]\n        })\n\n        return parsedElements\n    }\n\n    if (elements instanceof NodeList) return [...elements]\n\n    return isDomElement(elements) ? [elements] : null\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable, selector or elements.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 36,
                      "offset": 35
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 36,
                  "offset": 35
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 36,
              "offset": 35
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            },
            {
              "type": "NameExpression",
              "name": "Text"
            }
          ]
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "domElements - The array of dom elements from elements.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 55,
                      "offset": 54
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 55,
                  "offset": 54
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 55,
              "offset": 54
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "examples": [
      {
        "description": "<caption id=\"es-next\">\nimport { getElements } from 'chirashi'\nconst div  = document.createElement('div'),\n    div2 = document.createElement('div'),\n    test = document.createElement('div'),\n    test2 = document.createElement('div')\ntest.classList.add('test')\ntest2.classList.add('test2')\ngetElements('div') // [<div></div>, <div></div>]\ngetElements('.test, .test2') // [<div class=\"test\"></div>, <div class=\"test2\"></div>]\ngetElements([div, div2, '.test2', '.unknown']) // [<div></div>, <div></div>, <div class=\"test2\"></div>]\ngetElements(['.test', '.test2']) // [<div class=\"test\"></div>, <div class=\"test2\"></div>]\n</caption>\n<caption id=\"es5\">\nvar div  = document.createElement('div'),\n    div2 = document.createElement('div'),\n    test = document.createElement('div'),\n    test2 = document.createElement('div')\ntest.classList.add('test')\ntest2.classList.add('test2')\ndocument.body.appendChild(div)\ndocument.body.appendChild(div2)\ndocument.body.appendChild(test)\ndocument.body.appendChild(test2)\nChirashi.getElements('div') // [<div></div>, <div></div>]\nChirashi.getElements('.test, .test2') // [<div class=\"test\"></div>, <div class=\"test2\"></div>]\nChirashi.getElements([div, div2, '.test2', '.unknown']) // [<div></div>, <div></div>, <div class=\"test2\"></div>]\nChirashi.getElements(['.test', '.test2']) // [<div class=\"test\"></div>, <div class=\"test2\"></div>]\n</caption>"
      }
    ],
    "name": "getElements",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "getElements"
      }
    ],
    "namespace": "getElements"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Get a dom element from selector.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 33,
                  "offset": 32
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 33,
              "offset": 32
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 33,
          "offset": 32
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The query selector.",
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "selector"
      },
      {
        "title": "return",
        "description": "domElement - The first dom element matching selector.",
        "lineNumber": 3,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 5,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 6,
          "column": 0
        },
        "end": {
          "line": 8,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/core/getSelector.js",
      "code": "/**\n * Get a dom element from selector.\n * @param {string} selector - The query selector.\n * @return {window | document | HTMLElement | SVGElement} domElement - The first dom element matching selector.\n */\nexport default function getSelector (selector) {\n    return document.querySelector(selector)\n}\n"
    },
    "params": [
      {
        "name": "selector",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The query selector.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 20,
                      "offset": 19
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 20,
                  "offset": 19
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 20,
              "offset": 19
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "domElement - The first dom element matching selector.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 54,
                      "offset": 53
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 54,
                  "offset": 53
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 54,
              "offset": 53
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        }
      }
    ],
    "name": "getSelector",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "getSelector"
      }
    ],
    "namespace": "getSelector"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Get array of dom elements from selector.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 41,
                  "offset": 40
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 41,
              "offset": 40
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 41,
          "offset": 40
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The query selector.",
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "selector"
      },
      {
        "title": "return",
        "description": "domElements - The dom elements matching selector.",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 5,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 6,
          "column": 0
        },
        "end": {
          "line": 8,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/core/getSelectorAll.js",
      "code": "/**\n * Get array of dom elements from selector.\n * @param {string} selector - The query selector.\n * @return {Array} domElements - The dom elements matching selector.\n */\nexport default function getSelectorAll (selector) {\n    return [...document.querySelectorAll(selector)]\n}\n"
    },
    "params": [
      {
        "name": "selector",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The query selector.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 20,
                      "offset": 19
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 20,
                  "offset": 19
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 20,
              "offset": 19
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "domElements - The dom elements matching selector.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 50,
                      "offset": 49
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 50,
                  "offset": 49
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 50,
              "offset": 49
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "name": "getSelectorAll",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "getSelectorAll"
      }
    ],
    "namespace": "getSelectorAll"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Test if element is a dom element.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 34,
                  "offset": 33
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 34,
              "offset": 33
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 34,
          "offset": 33
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The element to test.",
        "lineNumber": 2,
        "type": {
          "type": "AllLiteral"
        },
        "name": "element"
      },
      {
        "title": "return",
        "description": "isDomElement - true if element is HTMLElement, SVGElement, window, document or Text.",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "bool"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 5,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 6,
          "column": 0
        },
        "end": {
          "line": 12,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/core/isDomElement.js",
      "code": "/**\n * Test if element is a dom element.\n * @param {*} element - The element to test.\n * @return {bool} isDomElement - true if element is HTMLElement, SVGElement, window, document or Text.\n */\nexport default function isDomElement(element) {\n    return element instanceof HTMLElement\n        || element === window\n        || element === document\n        || element instanceof SVGElement\n        || element instanceof Text\n}\n"
    },
    "params": [
      {
        "name": "element",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The element to test.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 21,
                      "offset": 20
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 21,
                  "offset": 20
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 21,
              "offset": 20
            }
          }
        },
        "type": {
          "type": "AllLiteral"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "isDomElement - true if element is HTMLElement, SVGElement, window, document or Text.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 85,
                      "offset": 84
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 85,
                  "offset": 84
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 85,
              "offset": 84
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "bool"
        }
      }
    ],
    "name": "isDomElement",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "isDomElement"
      }
    ],
    "namespace": "isDomElement"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Add all classes on each elements.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 34,
                  "offset": 33
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 34,
              "offset": 33
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 34,
          "offset": 33
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable, selector or elements.",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            },
            {
              "type": "NameExpression",
              "name": "Text"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "The classes seperated with spaces.",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "classes"
      },
      {
        "title": "return",
        "description": "elements - The elements for chaining.",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 8,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 18,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/dom/addClass.js",
      "code": "import forElements from '../core/forElements'\n\n/**\n * Add all classes on each elements.\n * @param {string | Array | NodeList | HTMLCollection | window | document | HTMLElement | SVGElement | Text} elements - The iterable, selector or elements.\n * @param {string} classes - The classes seperated with spaces.\n * @return {Array} elements - The elements for chaining.\n */\nexport default function addClass (elements, classes) {\n    classes = classes.split(' ')\n\n    return forElements(elements, element => {\n        if (!element.classList) return\n\n        let i = classes.length\n        while(i--) element.classList.add(classes[i])\n    })\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable, selector or elements.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 36,
                      "offset": 35
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 36,
                  "offset": 35
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 36,
              "offset": 35
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            },
            {
              "type": "NameExpression",
              "name": "Text"
            }
          ]
        }
      },
      {
        "name": "classes",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The classes seperated with spaces.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 35,
                      "offset": 34
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 35,
                  "offset": 34
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 35,
              "offset": 34
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "elements - The elements for chaining.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 38,
                      "offset": 37
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 38,
                  "offset": 37
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 38,
              "offset": 37
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "name": "addClass",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "addClass"
      }
    ],
    "namespace": "addClass"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Appends node to each element of elements.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 42,
                  "offset": 41
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 42,
              "offset": 41
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 42,
          "offset": 41
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable, selector or elements.",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            },
            {
              "type": "NameExpression",
              "name": "Text"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "Array of DOM elements or html strings or tags to create it.",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        },
        "name": "nodes"
      },
      {
        "title": "param",
        "description": "The array of attributes' object ( only used with node creation and length should match elements' one ).",
        "lineNumber": 4,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "Array"
          }
        },
        "name": "attributes",
        "default": "[]"
      },
      {
        "title": "return",
        "description": "elements - The elements for chaining.",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 6,
        "column": 0
      },
      "end": {
        "line": 12,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 13,
          "column": 0
        },
        "end": {
          "line": 29,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/dom/append.js",
      "code": "import forEach       from '../core/forEach'\nimport forElements   from '../core/forElements'\nimport isDomElement  from '../core/isDomElement'\nimport createElement from './createElement'\n\n/**\n * Appends node to each element of elements.\n * @param {string | Array | NodeList | HTMLCollection | window | document | HTMLElement | SVGElement | Text} elements - The iterable, selector or elements.\n * @param {Array} nodes - Array of DOM elements or html strings or tags to create it.\n * @param {Array} [attributes=[]] - The array of attributes' object ( only used with node creation and length should match elements' one ).\n * @return {Array} elements - The elements for chaining.\n */\nexport default function append (elements, nodes, attributes=[]) {\n    let parsedNodes = []\n    forEach(nodes, (node, index) => {\n        if (typeof node == 'string') node = createElement(node, attributes[index] || {})\n\n        if (isDomElement(node))\n            parsedNodes.push(node)\n    })\n\n    return forElements(elements, (element, index) => {\n        if (!element.appendChild) return\n\n        forEach(parsedNodes, node => {\n            element.appendChild(node)\n        })\n    })\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable, selector or elements.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 36,
                      "offset": 35
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 36,
                  "offset": 35
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 36,
              "offset": 35
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            },
            {
              "type": "NameExpression",
              "name": "Text"
            }
          ]
        }
      },
      {
        "name": "nodes",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Array of DOM elements or html strings or tags to create it.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 60,
                      "offset": 59
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 60,
                  "offset": 59
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 60,
              "offset": 59
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      },
      {
        "name": "attributes",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The array of attributes' object ( only used with node creation and length should match elements' one ).",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 104,
                      "offset": 103
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 104,
                  "offset": 103
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 104,
              "offset": 103
            }
          }
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "Array"
          }
        },
        "default": "[]"
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "elements - The elements for chaining.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 38,
                      "offset": 37
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 38,
                  "offset": 37
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 38,
              "offset": 37
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "name": "append",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "append"
      }
    ],
    "namespace": "append"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Get attribute option from element if option is a string,\nset attributes from option keys to option values on elements\nif option is an object.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 3,
                  "column": 24,
                  "offset": 141
                },
                "indent": [
                  1,
                  1
                ]
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 3,
              "column": 24,
              "offset": 141
            },
            "indent": [
              1,
              1
            ]
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 3,
          "column": 24,
          "offset": 141
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable, selector or elements.",
        "lineNumber": 4,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            },
            {
              "type": "NameExpression",
              "name": "Text"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "attribute name for get or attribute names and values association as object for set.",
        "lineNumber": 5,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Object"
            }
          ]
        },
        "name": "option"
      },
      {
        "title": "return",
        "description": "value or elements - Value for option attribute or elements for chaining.",
        "lineNumber": 6,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 11,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 16,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/dom/attr.js",
      "code": "import setAttr from './setAttr'\nimport getAttr from './getAttr'\n\n/**\n * Get attribute option from element if option is a string,\n * set attributes from option keys to option values on elements\n * if option is an object.\n * @param {string | Array | NodeList | HTMLCollection | window | document | HTMLElement | SVGElement | Text} elements - The iterable, selector or elements.\n * @param {string | Object} option - attribute name for get or attribute names and values association as object for set.\n * @return {string | Array} value or elements - Value for option attribute or elements for chaining.\n */\nexport default function attr (elements, option) {\n    return typeof option == 'object'\n         ? setAttr(elements, option)\n         : getAttr(elements, option)\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable, selector or elements.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 36,
                      "offset": 35
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 36,
                  "offset": 35
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 36,
              "offset": 35
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            },
            {
              "type": "NameExpression",
              "name": "Text"
            }
          ]
        }
      },
      {
        "name": "option",
        "lineNumber": 5,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "attribute name for get or attribute names and values association as object for set.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 84,
                      "offset": 83
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 84,
                  "offset": 83
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 84,
              "offset": 83
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Object"
            }
          ]
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "value or elements - Value for option attribute or elements for chaining.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 73,
                      "offset": 72
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 73,
                  "offset": 72
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 73,
              "offset": 72
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        }
      }
    ],
    "name": "attr",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "attr"
      }
    ],
    "namespace": "attr"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Clones element.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 16,
                  "offset": 15
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 16,
              "offset": 15
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 16,
          "offset": 15
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable, selector or elements. Only first will be processed.",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            },
            {
              "type": "NameExpression",
              "name": "Text"
            }
          ]
        },
        "name": "element"
      },
      {
        "title": "return",
        "description": "clone - The clone of element.",
        "lineNumber": 3,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            },
            {
              "type": "NameExpression",
              "name": "Text"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 7,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 8,
          "column": 0
        },
        "end": {
          "line": 12,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/dom/clone.js",
      "code": "import getElement from '../core/getElement'\n\n/**\n * Clones element.\n * @param {string | Array | NodeList | HTMLCollection | HTMLElement | SVGElement | Text} element - The iterable, selector or elements. Only first will be processed.\n * @return {HTMLElement | SVGElement | Text} clone - The clone of element.\n */\nexport default function clone (element) {\n    element = getElement(element)\n\n    return !!element && element.cloneNode(true)\n}\n"
    },
    "params": [
      {
        "name": "element",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable, selector or elements. Only first will be processed.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 66,
                      "offset": 65
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 66,
                  "offset": 65
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 66,
              "offset": 65
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            },
            {
              "type": "NameExpression",
              "name": "Text"
            }
          ]
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "clone - The clone of element.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 30,
                      "offset": 29
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 30,
                  "offset": 29
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 30,
              "offset": 29
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            },
            {
              "type": "NameExpression",
              "name": "Text"
            }
          ]
        }
      }
    ],
    "name": "clone",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "clone"
      }
    ],
    "namespace": "clone"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Get closest element matching the tested value traveling up the DOM tree from element.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 86,
                  "offset": 85
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 86,
              "offset": 85
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 86,
          "offset": 85
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable, selector or elements. Only first will be processed.",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            },
            {
              "type": "NameExpression",
              "name": "Text"
            }
          ]
        },
        "name": "element"
      },
      {
        "title": "param",
        "description": "The selector or dom element to match.",
        "lineNumber": 3,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            },
            {
              "type": "NameExpression",
              "name": "Text"
            }
          ]
        },
        "name": "tested"
      },
      {
        "title": "param",
        "description": "The value is incremented for each parent tested,",
        "lineNumber": 4,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "RecordType",
            "fields": [
              {
                "type": "FieldType",
                "key": "value",
                "value": {
                  "type": "NameExpression",
                  "name": "number"
                }
              }
            ]
          }
        },
        "name": "level"
      },
      {
        "title": "return",
        "description": "matchedElement - The matched element or null.",
        "lineNumber": 5,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "bool"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            },
            {
              "type": "NameExpression",
              "name": "Text"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 9,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 10,
          "column": 0
        },
        "end": {
          "line": 20,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/dom/closest.js",
      "code": "import getElement from '../core/getElement'\n\n/**\n * Get closest element matching the tested value traveling up the DOM tree from element.\n * @param {string | Array | NodeList | HTMLCollection | HTMLElement | SVGElement | Text} element - The iterable, selector or elements. Only first will be processed.\n * @param {string | HTMLElement | SVGElement | Text} tested - The selector or dom element to match.\n * @param {{value: number}} [level] - The value is incremented for each parent tested,\n * @return {bool | HTMLElement | SVGElement | Text} matchedElement - The matched element or null.\n */\nexport default function closest (element, tested, level) {\n    if (level && typeof level.value != 'undefined') ++level.value\n\n    element = getElement(element)\n\n    return ((!element || element === window || element === document) ?\n            null\n            : ((typeof tested == 'string' && element.matches(tested) || element == tested) ?\n                element\n                : closest(element.parentNode, tested, level)))\n}\n"
    },
    "params": [
      {
        "name": "element",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable, selector or elements. Only first will be processed.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 66,
                      "offset": 65
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 66,
                  "offset": 65
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 66,
              "offset": 65
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            },
            {
              "type": "NameExpression",
              "name": "Text"
            }
          ]
        }
      },
      {
        "name": "tested",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The selector or dom element to match.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 38,
                      "offset": 37
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 38,
                  "offset": 37
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 38,
              "offset": 37
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            },
            {
              "type": "NameExpression",
              "name": "Text"
            }
          ]
        }
      },
      {
        "name": "level",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The value is incremented for each parent tested,",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 49,
                      "offset": 48
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 49,
                  "offset": 48
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 49,
              "offset": 48
            }
          }
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "RecordType",
            "fields": [
              {
                "type": "FieldType",
                "key": "value",
                "value": {
                  "type": "NameExpression",
                  "name": "number"
                }
              }
            ]
          }
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "matchedElement - The matched element or null.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 46,
                      "offset": 45
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 46,
                  "offset": 45
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 46,
              "offset": 45
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "bool"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            },
            {
              "type": "NameExpression",
              "name": "Text"
            }
          ]
        }
      }
    ],
    "name": "closest",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "closest"
      }
    ],
    "namespace": "closest"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Creates a dom element from an HTML string, tag or css selector.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 64,
                  "offset": 63
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 64,
              "offset": 63
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 64,
          "offset": 63
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The html string, tag or css selector.",
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "string"
      },
      {
        "title": "param",
        "description": "Object associating attribute name to value.",
        "lineNumber": 3,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "object"
          }
        },
        "name": "attributes",
        "default": "{}"
      },
      {
        "title": "return",
        "description": "element - The dom element created from the string.",
        "lineNumber": 4,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 9,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 10,
          "column": 0
        },
        "end": {
          "line": 45,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/dom/createElement.js",
      "code": "import forEach from '../core/forEach'\nimport forIn   from '../core/forIn'\n\n/**\n * Creates a dom element from an HTML string, tag or css selector.\n * @param {string} string - The html string, tag or css selector.\n * @param {object} [attributes={}] - Object associating attribute name to value.\n * @return {HTMLElement | SVGElement} element - The dom element created from the string.\n */\nexport default function createElement (string, attributes = {}) {\n    const classes = []\n\n    if (string.indexOf('<') === -1) {\n        let core = null\n\n        forEach(string.match(/[#\\.]?[a-zA-Z0-9]+/g), segment => {\n            if (segment.indexOf('.') === 0) {\n                if (!('class' in attributes))\n                    attributes.class = segment.slice(1)\n                else\n                    attributes.class += ` ${segment.slice(1)}`\n            }\n            else if (segment.indexOf('#') === 0) {\n                attributes.id = segment.slice(1)\n            }\n            else {\n                core = segment\n            }\n        })\n\n        if (core === null)\n            core = 'div'\n\n        string = `<${core}></${core}>`\n    }\n\n    let temp = document.createElement('div')\n    temp.innerHTML = string\n\n    let element = temp.firstChild\n\n    forIn(attributes, element.setAttribute.bind(element))\n\n    return element\n}\n"
    },
    "params": [
      {
        "name": "string",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The html string, tag or css selector.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 38,
                      "offset": 37
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 38,
                  "offset": 37
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 38,
              "offset": 37
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      },
      {
        "name": "attributes",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Object associating attribute name to value.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 44,
                      "offset": 43
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 44,
                  "offset": 43
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 44,
              "offset": 43
            }
          }
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "object"
          }
        },
        "default": "{}"
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "element - The dom element created from the string.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 51,
                      "offset": 50
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 51,
                  "offset": 50
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 51,
              "offset": 50
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        }
      }
    ],
    "name": "createElement",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "createElement"
      }
    ],
    "namespace": "createElement"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Get data attribute option from element if option is a string,\nset data attributes from option keys to option values on elements\nif option is an object.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 3,
                  "column": 24,
                  "offset": 151
                },
                "indent": [
                  1,
                  1
                ]
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 3,
              "column": 24,
              "offset": 151
            },
            "indent": [
              1,
              1
            ]
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 3,
          "column": 24,
          "offset": 151
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable, selector or elements.",
        "lineNumber": 4,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            },
            {
              "type": "NameExpression",
              "name": "Text"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "data attribute name or data attribute names and values association",
        "lineNumber": 5,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Object"
            }
          ]
        },
        "name": "option"
      },
      {
        "title": "param",
        "description": "| elements - Value if option was a string, elements for chaining if value was an object.",
        "lineNumber": 6,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        },
        "name": "value"
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 11,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 16,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/dom/data.js",
      "code": "import setData from './setData'\nimport getData from './getData'\n\n/**\n * Get data attribute option from element if option is a string,\n * set data attributes from option keys to option values on elements\n * if option is an object.\n * @param {string | Array | NodeList | HTMLCollection | window | document | HTMLElement | SVGElement | Text} elements - The iterable, selector or elements.\n * @param {string | Object} option - data attribute name or data attribute names and values association\n * @param {string | Array} value | elements - Value if option was a string, elements for chaining if value was an object.\n */\nexport default function data (elements, option) {\n    return typeof option == 'object'\n         ? setData(elements, option)\n         : getData(elements, option)\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable, selector or elements.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 36,
                      "offset": 35
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 36,
                  "offset": 35
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 36,
              "offset": 35
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            },
            {
              "type": "NameExpression",
              "name": "Text"
            }
          ]
        }
      },
      {
        "name": "option",
        "lineNumber": 5,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "data attribute name or data attribute names and values association",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 67,
                      "offset": 66
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 67,
                  "offset": 66
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 67,
              "offset": 66
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Object"
            }
          ]
        }
      },
      {
        "name": "value",
        "lineNumber": 6,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "| elements - Value if option was a string, elements for chaining if value was an object.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 89,
                      "offset": 88
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 89,
                  "offset": 88
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 89,
              "offset": 88
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            }
          ]
        }
      }
    ],
    "name": "data",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "data"
      }
    ],
    "namespace": "data"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Removes children of provided dom elements.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 43,
                  "offset": 42
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 43,
              "offset": 42
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 43,
          "offset": 42
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable, selector or elements.",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            },
            {
              "type": "NameExpression",
              "name": "Text"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "return",
        "description": "elements - The elements for chaining.",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 7,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 8,
          "column": 0
        },
        "end": {
          "line": 10,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/dom/empty.js",
      "code": "import setHtml from './setHtml'\n\n/**\n * Removes children of provided dom elements.\n * @param {string | Array | NodeList | HTMLCollection | window | document | HTMLElement | SVGElement | Text} elements - The iterable, selector or elements.\n * @return {Array} elements - The elements for chaining.\n */\nexport default function empty (elements) {\n    return setHtml(elements, '')\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable, selector or elements.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 36,
                      "offset": 35
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 36,
                  "offset": 35
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 36,
              "offset": 35
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            },
            {
              "type": "NameExpression",
              "name": "Text"
            }
          ]
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "elements - The elements for chaining.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 38,
                      "offset": 37
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 38,
                  "offset": 37
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 38,
              "offset": 37
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "name": "empty",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "empty"
      }
    ],
    "namespace": "empty"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Iterates over elements, returning an array of all elements matching tested selector.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 85,
                  "offset": 84
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 85,
              "offset": 84
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 85,
          "offset": 84
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable, selector or elements. Only first will be processed.",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            },
            {
              "type": "NameExpression",
              "name": "Text"
            }
          ]
        },
        "name": "element"
      },
      {
        "title": "param",
        "description": "The selector or dom element to match.",
        "lineNumber": 3,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            },
            {
              "type": "NameExpression",
              "name": "Text"
            }
          ]
        },
        "name": "tested"
      },
      {
        "title": "return",
        "description": "matching - The array of filtered elements.",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 8,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 18,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/dom/filter.js",
      "code": "import forElements from '../core/forElements'\n\n/**\n * Iterates over elements, returning an array of all elements matching tested selector.\n * @param {string | Array | NodeList | HTMLCollection | HTMLElement | SVGElement | Text} element - The iterable, selector or elements. Only first will be processed.\n * @param {string | HTMLElement | SVGElement | Text} tested - The selector or dom element to match.\n * @return {Array} matching - The array of filtered elements.\n */\nexport default function filter (elements, tested) {\n    let matching = []\n\n    forElements(elements, element => {\n        if (typeof tested === 'string' && 'matches' in element && element.matches(tested) || element === tested)\n            matching.push(element)\n    })\n\n    return matching\n}\n"
    },
    "params": [
      {
        "name": "element",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable, selector or elements. Only first will be processed.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 66,
                      "offset": 65
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 66,
                  "offset": 65
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 66,
              "offset": 65
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            },
            {
              "type": "NameExpression",
              "name": "Text"
            }
          ]
        }
      },
      {
        "title": "param",
        "name": "elements",
        "lineNumber": 9
      },
      {
        "name": "tested",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The selector or dom element to match.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 38,
                      "offset": 37
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 38,
                  "offset": 37
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 38,
              "offset": 37
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            },
            {
              "type": "NameExpression",
              "name": "Text"
            }
          ]
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "matching - The array of filtered elements.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 43,
                      "offset": 42
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 43,
                  "offset": 42
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 43,
              "offset": 42
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "name": "filter",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "filter"
      }
    ],
    "namespace": "filter"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Iterates over each element of elements and returns an array containing all elements' children matching a selector.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 115,
                  "offset": 114
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 115,
              "offset": 114
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 115,
          "offset": 114
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector.",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "The selector.",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "selector"
      },
      {
        "title": "return",
        "description": "found - The elements' children matching the selector.",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 8,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 17,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/dom/find.js",
      "code": "import forElements from '../core/forElements'\n\n/**\n * Iterates over each element of elements and returns an array containing all elements' children matching a selector.\n * @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector.\n * @param {string} selector - The selector.\n * @return {Array} found - The elements' children matching the selector.\n */\nexport default function find (elements, selector) {\n    let found = []\n\n    forElements(elements, element => {\n        found = [...found, ...element.querySelectorAll(selector)]\n    })\n\n    return found\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 26,
                      "offset": 25
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 26,
                  "offset": 25
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 26,
              "offset": 25
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "selector",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The selector.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "found - The elements' children matching the selector.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 54,
                      "offset": 53
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 54,
                  "offset": 53
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 54,
              "offset": 53
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "name": "find",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "find"
      }
    ],
    "namespace": "find"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Find the first element's child matching the selector.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 54,
                  "offset": 53
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 54,
              "offset": 53
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 54,
          "offset": 53
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The parent element or selector.",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        },
        "name": "element"
      },
      {
        "title": "param",
        "description": "The selector to match.",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "selector"
      },
      {
        "title": "return",
        "description": "element - The first child of elements matching the selector.",
        "lineNumber": 4,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 8,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 13,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/dom/findOne.js",
      "code": "import getElement from '../core/getElement'\n\n/**\n * Find the first element's child matching the selector.\n * @param {string | window | document | HTMLElement | SVGElement} element - The parent element or selector.\n * @param {string} selector - The selector to match.\n * @return {HTMLElement | SVGElement} element - The first child of elements matching the selector.\n */\nexport default function findOne (element, selector) {\n    element = getElement(element)\n\n    return (!!element && 'querySelector' in element) ? element.querySelector(selector) : null\n}\n"
    },
    "params": [
      {
        "name": "element",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The parent element or selector.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 32,
                      "offset": 31
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 32,
                  "offset": 31
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 32,
              "offset": 31
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        }
      },
      {
        "name": "selector",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The selector to match.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 23,
                      "offset": 22
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 23,
                  "offset": 22
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 23,
              "offset": 22
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "element - The first child of elements matching the selector.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 61,
                      "offset": 60
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 61,
                  "offset": 60
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 61,
              "offset": 60
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        }
      }
    ],
    "name": "findOne",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "findOne"
      }
    ],
    "namespace": "findOne"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Get value for named attribute of element.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 42,
                  "offset": 41
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 42,
              "offset": 41
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 42,
          "offset": 41
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The selector or dom element.",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        },
        "name": "element"
      },
      {
        "title": "param",
        "description": "The attribute's name.",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "name"
      },
      {
        "title": "return",
        "description": "value - The value for the attribute.",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 8,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 13,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/dom/getAttr.js",
      "code": "import getElement from '../core/getElement'\n\n/**\n * Get value for named attribute of element.\n * @param {string | window | document | HTMLElement | SVGElement} element - The selector or dom element.\n * @param {string} name - The attribute's name.\n * @return {string} value - The value for the attribute.\n */\nexport default function getAttr (element, name) {\n    element = getElement(element)\n\n    return !!element && 'getAttribute' in element && element.getAttribute(name)\n}\n"
    },
    "params": [
      {
        "name": "element",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The selector or dom element.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 29,
                      "offset": 28
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 29,
                  "offset": 28
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 29,
              "offset": 28
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        }
      },
      {
        "name": "name",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The attribute's name.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 22,
                      "offset": 21
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 22,
                  "offset": 21
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 22,
              "offset": 21
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "value - The value for the attribute.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 37,
                      "offset": 36
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 37,
                  "offset": 36
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 37,
              "offset": 36
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      }
    ],
    "name": "getAttr",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "getAttr"
      }
    ],
    "namespace": "getAttr"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Get value for named data-attribute of element.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 47,
                  "offset": 46
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 47,
              "offset": 46
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 47,
          "offset": 46
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The selector or dom element.",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        },
        "name": "element"
      },
      {
        "title": "param",
        "description": "The data-attribute's name.",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "name"
      },
      {
        "title": "return",
        "description": "value - The value for the data-attribute.",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 8,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 11,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/dom/getData.js",
      "code": "import getAttr from './getAttr'\n\n/**\n * Get value for named data-attribute of element.\n * @param {string | window | document | HTMLElement | SVGElement} element - The selector or dom element.\n * @param {string} name - The data-attribute's name.\n * @return {string} value - The value for the data-attribute.\n */\nexport default function getData (element, name) {\n    return getAttr(element, `data-${name}`)\n}\n"
    },
    "params": [
      {
        "name": "element",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The selector or dom element.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 29,
                      "offset": 28
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 29,
                  "offset": 28
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 29,
              "offset": 28
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        }
      },
      {
        "name": "name",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The data-attribute's name.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 27,
                      "offset": 26
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 27,
                  "offset": 26
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 27,
              "offset": 26
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "value - The value for the data-attribute.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 42,
                      "offset": 41
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 42,
                  "offset": 41
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 42,
              "offset": 41
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      }
    ],
    "name": "getData",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "getData"
      }
    ],
    "namespace": "getData"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Get the inner html of an element.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 34,
                  "offset": 33
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 34,
              "offset": 33
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 34,
          "offset": 33
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The selector or dom element.",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        },
        "name": "element"
      },
      {
        "title": "return",
        "description": "innerHTML - The inner html of the element.",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 7,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 8,
          "column": 0
        },
        "end": {
          "line": 12,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/dom/getHtml.js",
      "code": "import getElement from '../core/getElement'\n\n/**\n * Get the inner html of an element.\n * @param {string | window | document | HTMLElement | SVGElement} element - The selector or dom element.\n * @return {string} innerHTML - The inner html of the element.\n */\nexport default function getHtml (element) {\n    element = getElement(element)\n\n    return !!element ? element.innerHTML : null\n}\n"
    },
    "params": [
      {
        "name": "element",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The selector or dom element.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 29,
                      "offset": 28
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 29,
                  "offset": 28
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 29,
              "offset": 28
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "innerHTML - The inner html of the element.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 43,
                      "offset": 42
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 43,
                  "offset": 42
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 43,
              "offset": 42
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      }
    ],
    "name": "getHtml",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "getHtml"
      }
    ],
    "namespace": "getHtml"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Get the value for the property name on the element.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 52,
                  "offset": 51
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 52,
              "offset": 51
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 52,
          "offset": 51
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The selector or dom element",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        },
        "name": "element"
      },
      {
        "title": "param",
        "description": "The name of the property",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "name"
      },
      {
        "title": "return",
        "description": "innerHTML - The inner html of the element",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 8,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 13,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/dom/getProp.js",
      "code": "import getElement from '../core/getElement'\n\n/**\n * Get the value for the property name on the element.\n * @param {string | window | document | HTMLElement | SVGElement} element - The selector or dom element\n * @param {string} name - The name of the property\n * @return {string} innerHTML - The inner html of the element\n */\nexport default function getProp (element, name) {\n    element = getElement(element)\n\n    return !!element && element[name]\n}\n"
    },
    "params": [
      {
        "name": "element",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The selector or dom element",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 28,
                      "offset": 27
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 28,
                  "offset": 27
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 28,
              "offset": 27
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        }
      },
      {
        "name": "name",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The name of the property",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "innerHTML - The inner html of the element",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 42,
                      "offset": 41
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 42,
                  "offset": 41
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 42,
              "offset": 41
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      }
    ],
    "name": "getProp",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "getProp"
      }
    ],
    "namespace": "getProp"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Test if element has all the classes.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 37,
                  "offset": 36
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 37,
              "offset": 36
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 37,
          "offset": 36
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The selector or dom element",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        },
        "name": "element"
      },
      {
        "title": "param",
        "description": "The classes seperated with spaces",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "classes"
      },
      {
        "title": "return",
        "description": "hasClass - True if element has all the classes, false otherwise",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "bool"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 8,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 19,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/dom/hasClass.js",
      "code": "import getElement from '../core/getElement'\n\n/**\n * Test if element has all the classes.\n * @param {string | window | document | HTMLElement | SVGElement} element - The selector or dom element\n * @param {string} classes - The classes seperated with spaces\n * @return {bool} hasClass - True if element has all the classes, false otherwise\n */\nexport default function hasClass (element, classes) {\n    element = getElement(element)\n    if (!element || !element.classList) return\n\n    classes = classes.split(' ')\n\n    let i = classes.length, found = false\n    while(i-- && (found = element.classList.contains(classes[i]))) {}\n\n    return found\n}\n"
    },
    "params": [
      {
        "name": "element",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The selector or dom element",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 28,
                      "offset": 27
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 28,
                  "offset": 27
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 28,
              "offset": 27
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        }
      },
      {
        "name": "classes",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The classes seperated with spaces",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 34,
                      "offset": 33
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 34,
                  "offset": 33
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 34,
              "offset": 33
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "hasClass - True if element has all the classes, false otherwise",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 64,
                      "offset": 63
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 64,
                  "offset": 63
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 64,
              "offset": 63
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "bool"
        }
      }
    ],
    "name": "hasClass",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "hasClass"
      }
    ],
    "namespace": "hasClass"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Set inner html of elements if string is provided, get it otherwise.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 68,
                  "offset": 67
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 68,
              "offset": 67
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 68,
          "offset": 67
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "The content to inject in the elements",
        "lineNumber": 3,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        "name": "string"
      },
      {
        "title": "return",
        "description": "innerHTML or elements - The inner html of the elements or elements for chaining",
        "lineNumber": 4,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 9,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 10,
          "column": 0
        },
        "end": {
          "line": 14,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/dom/html.js",
      "code": "import setHtml from './setHtml'\nimport getHtml from './getHtml'\n\n/**\n * Set inner html of elements if string is provided, get it otherwise.\n * @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n * @param {string} [string] - The content to inject in the elements\n * @return {string | Array | window | document | HTMLElement | SVGElement} innerHTML or elements - The inner html of the elements or elements for chaining\n */\nexport default function html (elements, string) {\n    return typeof string == 'string'\n         ? setHtml(elements, string)\n         : getHtml(elements)\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "string",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The content to inject in the elements",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 38,
                      "offset": 37
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 38,
                  "offset": 37
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 38,
              "offset": 37
            }
          }
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "innerHTML or elements - The inner html of the elements or elements for chaining",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 80,
                      "offset": 79
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 80,
                  "offset": 79
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 80,
              "offset": 79
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        }
      }
    ],
    "name": "html",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "html"
      }
    ],
    "namespace": "html"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Get the position of element in his parent's children.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 54,
                  "offset": 53
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 54,
              "offset": 53
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 54,
          "offset": 53
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The selector or dom element",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        },
        "name": "element"
      },
      {
        "title": "return",
        "description": "index - The position of element in his parent's children",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "number"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 7,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 8,
          "column": 0
        },
        "end": {
          "line": 22,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/dom/indexInParent.js",
      "code": "import getElement from '../core/getElement'\n\n/**\n * Get the position of element in his parent's children.\n * @param {string | HTMLElement | SVGElement} element - The selector or dom element\n * @return {number} index - The position of element in his parent's children\n */\nexport default function indexInParent (element) {\n    element = getElement(element)\n    if (!element) return\n\n    let currentElement = element,\n        parent = element.parentNode,\n        i = 0\n\n    while (currentElement.previousElementSibling) {\n        ++i\n        currentElement = currentElement.previousElementSibling\n    }\n\n    return element === parent.children[i] ? i : -1\n}\n"
    },
    "params": [
      {
        "name": "element",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The selector or dom element",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 28,
                      "offset": 27
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 28,
                  "offset": 27
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 28,
              "offset": 27
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "index - The position of element in his parent's children",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 57,
                      "offset": 56
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 57,
                  "offset": 56
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 57,
              "offset": 56
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "number"
        }
      }
    ],
    "name": "indexInParent",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "indexInParent"
      }
    ],
    "namespace": "indexInParent"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Insert nodes to each element's parent of elements after element.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 65,
                  "offset": 64
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 65,
              "offset": 64
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 65,
          "offset": 64
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "Array of DOM elements or html strings or tags to create it",
        "lineNumber": 3,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "nodes"
      },
      {
        "title": "param",
        "description": "The array of attributes' object ( only used with node creation and length should match elements one )",
        "lineNumber": 4,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "Array"
          }
        },
        "name": "attributes",
        "default": "[]"
      },
      {
        "title": "return",
        "description": "elements - The iterable for chaining",
        "lineNumber": 5,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 10,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 11,
          "column": 0
        },
        "end": {
          "line": 27,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/dom/insertAfter.js",
      "code": "import forElements   from '../core/forElements'\nimport createElement from './createElement'\n\n/**\n * Insert nodes to each element's parent of elements after element.\n * @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n * @param {string | Array | NodeList | HTMLCollection} nodes - Array of DOM elements or html strings or tags to create it\n * @param {Array} [attributes=[]] - The array of attributes' object ( only used with node creation and length should match elements one )\n * @return {string | Array | NodeList | HTMLCollection} elements - The iterable for chaining\n */\nexport default function insertAfter (elements, nodes, attributes=[]) {\n    let parsedNodes = []\n    forEach(nodes, (node, index) => {\n        if (typeof node == 'string') node = createElement(node, attributes[index] || {})\n\n        if (isDomElement(node))\n            parsedNodes.push(node)\n    })\n\n    return forElements(elements, (element, index) => {\n        if (!element.parentNode || !element.parentNode.insertBefore) return\n\n        forEach(parsedNodes, node => {\n            element.parentNode.insertBefore(node, element.nextElementSibling)\n        })\n    })\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "nodes",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Array of DOM elements or html strings or tags to create it",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 59,
                      "offset": 58
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 59,
                  "offset": 58
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 59,
              "offset": 58
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "attributes",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The array of attributes' object ( only used with node creation and length should match elements one )",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 102,
                      "offset": 101
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 102,
                  "offset": 101
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 102,
              "offset": 101
            }
          }
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "Array"
          }
        },
        "default": "[]"
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "elements - The iterable for chaining",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 37,
                      "offset": 36
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 37,
                  "offset": 36
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 37,
              "offset": 36
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "name": "insertAfter",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "insertAfter"
      }
    ],
    "namespace": "insertAfter"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Insert nodes to each element's parent of elements before element.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 66,
                  "offset": 65
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 66,
              "offset": 65
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 66,
          "offset": 65
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "Array of DOM elements or html strings or tags to create it",
        "lineNumber": 3,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "nodes"
      },
      {
        "title": "param",
        "description": "The array of attributes' object ( only used with node creation and length should match elements one )",
        "lineNumber": 4,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "Array"
          }
        },
        "name": "attributes",
        "default": "[]"
      },
      {
        "title": "return",
        "description": "elements - The iterable for chaining",
        "lineNumber": 5,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 5,
        "column": 0
      },
      "end": {
        "line": 11,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 28,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/dom/insertBefore.js",
      "code": "import forEach       from '../core/forEach'\nimport forElements   from '../core/forElements'\nimport createElement from './createElement'\n\n/**\n * Insert nodes to each element's parent of elements before element.\n * @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n * @param {string | Array | NodeList | HTMLCollection} nodes - Array of DOM elements or html strings or tags to create it\n * @param {Array} [attributes=[]] - The array of attributes' object ( only used with node creation and length should match elements one )\n * @return {string | Array | NodeList | HTMLCollection} elements - The iterable for chaining\n */\nexport default function insertBefore (elements, nodes, attributes=[]) {\n    let parsedNodes = []\n    forEach(nodes, (node, index) => {\n        if (typeof node == 'string') node = createElement(node, attributes[index] || {})\n\n        if (isDomElement(node))\n            parsedNodes.push(node)\n    })\n\n    return forElements(elements, (element, index) => {\n        if (!element.parentNode || !element.parentNode.insertBefore) return\n\n        forEach(parsedNodes, node => {\n            element.parentNode.insertBefore(node, element)\n        })\n    })\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "nodes",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Array of DOM elements or html strings or tags to create it",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 59,
                      "offset": 58
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 59,
                  "offset": 58
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 59,
              "offset": 58
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "attributes",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The array of attributes' object ( only used with node creation and length should match elements one )",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 102,
                      "offset": 101
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 102,
                  "offset": 101
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 102,
              "offset": 101
            }
          }
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "Array"
          }
        },
        "default": "[]"
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "elements - The iterable for chaining",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 37,
                      "offset": 36
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 37,
                  "offset": 36
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 37,
              "offset": 36
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "name": "insertBefore",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "insertBefore"
      }
    ],
    "namespace": "insertBefore"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Get the next sibling of element.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 33,
                  "offset": 32
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 33,
              "offset": 32
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 33,
          "offset": 32
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The selector or dom element",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        },
        "name": "element"
      },
      {
        "title": "return",
        "description": "element - The next element",
        "lineNumber": 3,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 7,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 8,
          "column": 0
        },
        "end": {
          "line": 13,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/dom/next.js",
      "code": "import getElement from '../core/getElement'\n\n/**\n * Get the next sibling of element.\n * @param {string | HTMLElement | SVGElement} element - The selector or dom element\n * @return {HTMLElement | SVGElement} element - The next element\n */\nexport default function next (element) {\n    element = getElement(element)\n    if (!element) return\n\n    return element.nextElementSibling\n}\n"
    },
    "params": [
      {
        "name": "element",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The selector or dom element",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 28,
                      "offset": 27
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 28,
                  "offset": 27
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 28,
              "offset": 27
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "element - The next element",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 27,
                      "offset": 26
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 27,
                  "offset": 26
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 27,
              "offset": 26
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        }
      }
    ],
    "name": "next",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "next"
      }
    ],
    "namespace": "next"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Get the parent node of the element.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 36,
                  "offset": 35
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 36,
              "offset": 35
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 36,
          "offset": 35
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The selector or dom element",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        },
        "name": "element"
      },
      {
        "title": "return",
        "description": "element - The parent node",
        "lineNumber": 3,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 7,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 8,
          "column": 0
        },
        "end": {
          "line": 12,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/dom/parent.js",
      "code": "import getElement from '../core/getElement'\n\n/**\n * Get the parent node of the element.\n * @param {string | HTMLElement | SVGElement} element - The selector or dom element\n * @return {HTMLElement | SVGElement} element - The parent node\n */\nexport default function parent (element) {\n    element = getElement(element)\n\n    return !!element && element.parentNode\n}\n"
    },
    "params": [
      {
        "name": "element",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The selector or dom element",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 28,
                      "offset": 27
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 28,
                  "offset": 27
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 28,
              "offset": 27
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "element - The parent node",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 26,
                      "offset": 25
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 26,
                  "offset": 25
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 26,
              "offset": 25
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        }
      }
    ],
    "name": "parent",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "parent"
      }
    ],
    "namespace": "parent"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Get the previous sibling of element.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 37,
                  "offset": 36
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 37,
              "offset": 36
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 37,
          "offset": 36
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The selector or dom element",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        },
        "name": "element"
      },
      {
        "title": "return",
        "description": "element - The previous element",
        "lineNumber": 3,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 7,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 8,
          "column": 0
        },
        "end": {
          "line": 12,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/dom/prev.js",
      "code": "import getElement from '../core/getElement'\n\n/**\n * Get the previous sibling of element.\n * @param {string | HTMLElement | SVGElement} element - The selector or dom element\n * @return {HTMLElement | SVGElement} element - The previous element\n */\nexport default function prev (element) {\n    element = getElement(element)\n\n    return !!element && element.previousElementSibling\n}\n"
    },
    "params": [
      {
        "name": "element",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The selector or dom element",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 28,
                      "offset": 27
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 28,
                  "offset": 27
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 28,
              "offset": 27
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "element - The previous element",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 31,
                      "offset": 30
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 31,
                  "offset": 30
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 31,
              "offset": 30
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        }
      }
    ],
    "name": "prev",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "prev"
      }
    ],
    "namespace": "prev"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Get property option from element if option is a string,\nset properties from option keys to option values on elements\nif option is an object.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 3,
                  "column": 24,
                  "offset": 140
                },
                "indent": [
                  1,
                  1
                ]
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 3,
              "column": 24,
              "offset": 140
            },
            "indent": [
              1,
              1
            ]
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 3,
          "column": 24,
          "offset": 140
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable, selector or dom element",
        "lineNumber": 4,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "return",
        "description": "value or elements - Value for option property or elements for chaining",
        "lineNumber": 5,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 10,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 11,
          "column": 0
        },
        "end": {
          "line": 15,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/dom/prop.js",
      "code": "import setProp from './setProp'\nimport getProp from './getProp'\n\n/**\n * Get property option from element if option is a string,\n * set properties from option keys to option values on elements\n * if option is an object.\n * @param {string | Array | window | document | HTMLElement | SVGElement} elements - The iterable, selector or dom element\n * @return {string | Array | window | document | HTMLElement | SVGElement} value or elements - Value for option property or elements for chaining\n */\nexport default function prop (elements, option) {\n    return typeof option == 'object'\n         ? setProp(elements, option)\n         : getProp(elements, option)\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable, selector or dom element",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 38,
                      "offset": 37
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 38,
                  "offset": 37
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 38,
              "offset": 37
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        }
      },
      {
        "title": "param",
        "name": "option",
        "lineNumber": 11
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "value or elements - Value for option property or elements for chaining",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 71,
                      "offset": 70
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 71,
                  "offset": 70
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 71,
              "offset": 70
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        }
      }
    ],
    "name": "prop",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "prop"
      }
    ],
    "namespace": "prop"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Remove all elements from dom.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 30,
                  "offset": 29
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 30,
              "offset": 29
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 30,
          "offset": 29
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "return",
        "description": "elements - The removed elements",
        "lineNumber": 3,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 7,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 8,
          "column": 0
        },
        "end": {
          "line": 14,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/dom/remove.js",
      "code": "import forElements from '../core/forElements'\n\n/**\n * Remove all elements from dom.\n * @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n * @return {string | Array | NodeList | HTMLCollection} elements - The removed elements\n */\nexport default function remove (elements) {\n    return forElements(elements, element => {\n        if (!element.parentNode) return\n\n        element.parentNode.removeChild(element)\n    })\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "elements - The removed elements",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 32,
                      "offset": 31
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 32,
                  "offset": 31
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 32,
              "offset": 31
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "name": "remove",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "remove"
      }
    ],
    "namespace": "remove"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Remove all classes on each elements.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 37,
                  "offset": 36
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 37,
              "offset": 36
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 37,
          "offset": 36
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "The classes seperated with spaces",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "classes"
      },
      {
        "title": "return",
        "description": "elements - The iterable for chaining",
        "lineNumber": 4,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 8,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 18,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/dom/removeClass.js",
      "code": "import forElements from '../core/forElements'\n\n/**\n * Remove all classes on each elements.\n * @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n * @param {string} classes - The classes seperated with spaces\n * @return {string | Array | NodeList | HTMLCollection} elements - The iterable for chaining\n */\nexport default function removeClass (elements, classes) {\n    classes = classes.split(' ')\n\n    return forElements(elements, element => {\n        if (!element.classList) return\n\n        let i = classes.length\n        while(i--) element.classList.remove(classes[i])\n    })\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "classes",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The classes seperated with spaces",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 34,
                      "offset": 33
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 34,
                  "offset": 33
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 34,
              "offset": 33
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "elements - The iterable for chaining",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 37,
                      "offset": 36
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 37,
                  "offset": 36
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 37,
              "offset": 36
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "name": "removeClass",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "removeClass"
      }
    ],
    "namespace": "removeClass"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Set attributes from attributes object keys to values on elements",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 65,
                  "offset": 64
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 65,
              "offset": 64
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 65,
          "offset": 64
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "attribute names and values association",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "Object"
        },
        "name": "attributes"
      },
      {
        "title": "return",
        "description": "elements - The iterable for chaining",
        "lineNumber": 4,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 8,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 26,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/dom/setAttr.js",
      "code": "import forElements from '../core/forElements'\n\n/**\n * Set attributes from attributes object keys to values on elements\n * @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n * @param {Object} attributes - attribute names and values association\n * @return {string | Array | NodeList | HTMLCollection} elements - The iterable for chaining\n */\nexport default function setAttr (elements, attributes) {\n    let attributesName = Object.keys(attributes)\n\n    return forElements(elements, element => {\n        if (!element.setAttribute) return\n\n        let i = attributesName.length, attributeName, value\n        while(i--) {\n            attributeName = attributesName[i]\n            value = attributes[attributeName]\n\n            if (value)\n                element.setAttribute(attributeName, value)\n            else\n                element.removeAttribute(name)\n        }\n    })\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "attributes",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "attribute names and values association",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 39,
                      "offset": 38
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 39,
                  "offset": 38
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 39,
              "offset": 38
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "Object"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "elements - The iterable for chaining",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 37,
                      "offset": 36
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 37,
                  "offset": 36
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 37,
              "offset": 36
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "name": "setAttr",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "setAttr"
      }
    ],
    "namespace": "setAttr"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Set data attributes from attributes object keys to values on elements",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 70,
                  "offset": 69
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 70,
              "offset": 69
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 70,
          "offset": 69
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "attribute names and values association",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "Object"
        },
        "name": "attributes"
      },
      {
        "title": "return",
        "description": "elements - The iterable for chaining",
        "lineNumber": 4,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 8,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 26,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/dom/setData.js",
      "code": "import forElements from '../core/forElements'\n\n/**\n * Set data attributes from attributes object keys to values on elements\n * @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n * @param {Object} attributes - attribute names and values association\n * @return {string | Array | NodeList | HTMLCollection} elements - The iterable for chaining\n */\nexport default function setData (elements, attributes) {\n    let attributesName = Object.keys(attributes)\n\n    return forElements(elements, element => {\n        if (!element.setAttribute) return\n\n        let i = attributesName.length, attributeName\n        while(i--) {\n            attributeName = attributesName[i]\n            value = attributes[attributeName]\n\n            if (value)\n                element.setAttribute('data-'+attributeName, value)\n            else\n                element.removeAttribute(name)\n        }\n    })\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "attributes",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "attribute names and values association",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 39,
                      "offset": 38
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 39,
                  "offset": 38
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 39,
              "offset": 38
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "Object"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "elements - The iterable for chaining",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 37,
                      "offset": 36
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 37,
                  "offset": 36
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 37,
              "offset": 36
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "name": "setData",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "setData"
      }
    ],
    "namespace": "setData"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Set inner html of elements to string.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 38,
                  "offset": 37
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 38,
              "offset": 37
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 38,
          "offset": 37
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "The content to inject in the elements",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "string"
      },
      {
        "title": "return",
        "description": "elements - The iterable for chaining",
        "lineNumber": 4,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 8,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 13,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/dom/setHtml.js",
      "code": "import forElements from '../core/forElements'\n\n/**\n * Set inner html of elements to string.\n * @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n * @param {string} string - The content to inject in the elements\n * @return {string | Array | NodeList | HTMLCollection} elements - The iterable for chaining\n */\nexport default function setHtml (elements, string) {\n    return forElements(elements, element => {\n        element.innerHTML = string\n    })\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "string",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The content to inject in the elements",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 38,
                      "offset": 37
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 38,
                  "offset": 37
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 38,
              "offset": 37
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "elements - The iterable for chaining",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 37,
                      "offset": 36
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 37,
                  "offset": 36
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 37,
              "offset": 36
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "name": "setHtml",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "setHtml"
      }
    ],
    "namespace": "setHtml"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Set properties from props object keys to values on elements",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 60,
                  "offset": 59
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 60,
              "offset": 59
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 60,
          "offset": 59
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "properties names and values association",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "Object"
        },
        "name": "props"
      },
      {
        "title": "return",
        "description": "elements - The iterable for chaining",
        "lineNumber": 4,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 9,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 10,
          "column": 0
        },
        "end": {
          "line": 12,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/dom/setProp.js",
      "code": "import forElements from '../core/forElements'\nimport forIn from '../core/forIn'\n\n/**\n * Set properties from props object keys to values on elements\n * @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n * @param {Object} props - properties names and values association\n * @return {string | Array | NodeList | HTMLCollection} elements - The iterable for chaining\n */\nexport default function setProp (elements, props) {\n    return forElements(elements, element => Objec.assign(element, props))\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "props",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "properties names and values association",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 40,
                      "offset": 39
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 40,
                  "offset": 39
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 40,
              "offset": 39
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "Object"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "elements - The iterable for chaining",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 37,
                      "offset": 36
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 37,
                  "offset": 36
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 37,
              "offset": 36
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "name": "setProp",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "setProp"
      }
    ],
    "namespace": "setProp"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Toggle all classes on each elements.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 37,
                  "offset": 36
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 37,
              "offset": 36
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 37,
          "offset": 36
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "The classes seperated with spaces",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "classes"
      },
      {
        "title": "return",
        "description": "elements - The iterable for chaining",
        "lineNumber": 4,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 8,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 18,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/dom/toggleClass.js",
      "code": "import forElements from '../core/forElements'\n\n/**\n * Toggle all classes on each elements.\n * @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n * @param {string} classes - The classes seperated with spaces\n * @return {string | Array | NodeList | HTMLCollection} elements - The iterable for chaining\n */\nexport default function toggleClass (elements, classes) {\n    classes = classes.split(' ')\n\n    return forElements(elements, element => {\n        if (!element.classList) return\n\n        let i = classes.length\n        while(i--) element.classList.toggle(classes[i])\n    })\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "classes",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The classes seperated with spaces",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 34,
                      "offset": 33
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 34,
                  "offset": 33
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 34,
              "offset": 33
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "elements - The iterable for chaining",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 37,
                      "offset": 36
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 37,
                  "offset": 36
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 37,
              "offset": 36
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "name": "toggleClass",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "toggleClass"
      }
    ],
    "namespace": "toggleClass"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Bind events listener on body and execute callback when target matches selector.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 78,
                  "offset": 77
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 78,
              "offset": 77
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 78,
          "offset": 77
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The selector to match",
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "selector"
      },
      {
        "title": "param",
        "description": "The events that should be bound seperated with spaces",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "events"
      },
      {
        "title": "param",
        "description": "The callback used for event binding",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "function"
        },
        "name": "callback"
      },
      {
        "title": "return",
        "description": "object - An object with unbind method for unbinding",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "Object"
        }
      },
      {
        "title": "return",
        "description": "object.unbind - The unbind method",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "function"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 5,
        "column": 0
      },
      "end": {
        "line": 12,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 13,
          "column": 0
        },
        "end": {
          "line": 27,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/events/bind.js",
      "code": "import on      from './on'\nimport off     from './off'\nimport closest from '../dom/closest'\n\n/**\n * Bind events listener on body and execute callback when target matches selector.\n * @param {string} selector - The selector to match\n * @param {string} events - The events that should be bound seperated with spaces\n * @param {function} callback - The callback used for event binding\n * @return {Object} object - An object with unbind method for unbinding\n * @return {function} object.unbind - The unbind method\n */\nexport default function bind (selector, events, callback) {\n    const innerCallback = (event) => {\n        let target = closest(event.target, selector)\n        if (!!target)\n            callback(event, target)\n    }\n\n    on(document.body, events, innerCallback)\n\n    return {\n        unbind() {\n            off(document.body, events, innerCallback)\n        }\n    }\n}\n"
    },
    "params": [
      {
        "name": "selector",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The selector to match",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 22,
                      "offset": 21
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 22,
                  "offset": 21
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 22,
              "offset": 21
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      },
      {
        "name": "events",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The events that should be bound seperated with spaces",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 54,
                      "offset": 53
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 54,
                  "offset": 53
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 54,
              "offset": 53
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      },
      {
        "name": "callback",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The callback used for event binding",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 36,
                      "offset": 35
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 36,
                  "offset": 35
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 36,
              "offset": 35
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "function"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "object - An object with unbind method for unbinding",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 52,
                      "offset": 51
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 52,
                  "offset": 51
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 52,
              "offset": 51
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "Object"
        }
      },
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "object.unbind - The unbind method",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 34,
                      "offset": 33
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 34,
                  "offset": 33
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 34,
              "offset": 33
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "function"
        }
      }
    ],
    "name": "bind",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "bind"
      }
    ],
    "namespace": "bind"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Bind drag listener on each element of elements.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 48,
                  "offset": 47
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 48,
              "offset": 47
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 48,
          "offset": 47
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "The move callback",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "function"
        },
        "name": "move"
      },
      {
        "title": "param",
        "description": "The begin callback",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "function"
        },
        "name": "begin"
      },
      {
        "title": "param",
        "description": "The end callback",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "function"
        },
        "name": "end"
      },
      {
        "title": "return",
        "description": "offObject - An object with off method for unbinding",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      },
      {
        "title": "return",
        "description": "off - off method",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "object.off"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 12,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 13,
          "column": 0
        },
        "end": {
          "line": 74,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/events/drag.js",
      "code": "import forElements from '../core/forElements'\nimport on from './on'\n\n/**\n * Bind drag listener on each element of elements.\n * @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n * @param {function} move - The move callback\n * @param {function} begin - The begin callback\n * @param {function} end - The end callback\n * @return {object} offObject - An object with off method for unbinding\n * @return {object.off} off - off method\n */\nexport default function drag(elements, move, begin, end) {\n    let undragProperties = []\n\n    forElements(elements, element => {\n        let dragging = false\n\n        let undragProperty = {\n            element,\n\n            begin(e) {\n                e.preventDefault()\n                e.stopPropagation()\n\n                if ('touches' in e && e.touches.length) e = e.touches[0]\n\n                dragging = true\n\n                if (begin) begin({ x: e.pageX, y: e.pageY })\n            },\n\n            move(e) {\n                if (!dragging) return\n\n                e.preventDefault()\n                e.stopPropagation()\n\n                if ('touches' in e && e.touches.length) e = e.touches[0]\n\n                if (move) move({ x: e.pageX, y: e.pageY })\n            },\n\n            end(e) {\n                if (!dragging) return\n\n                e.preventDefault()\n                e.stopPropagation()\n\n                if ('touches' in e && e.touches.length) e = e.touches[0]\n\n                dragging = false\n\n                if (end) end({ x: e.pageX, y: e.pageY })\n            }\n        }\n\n        on(element, 'touchstart mousedown', undragProperty.begin)\n        on(document.body, 'touchmove mousemove', undragProperty.move)\n        on(document.body, 'touchend mouseup', undragProperty.end)\n\n        undragProperties.push(undragProperty)\n    })\n\n    return {\n        off() {\n            forEach(undragProperties, (undragProperty) => {\n                off(undragProperty.element, 'touchstart, mousedown', undragProperty.begin)\n                off(document.body, 'touchmove, mousemove', undragProperty.move)\n                off(document.body, 'touchend, mouseup', undragProperty.end)\n            })\n        }\n    }\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "move",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The move callback",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 18,
                      "offset": 17
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 18,
                  "offset": 17
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 18,
              "offset": 17
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "function"
        }
      },
      {
        "name": "begin",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The begin callback",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 19,
                      "offset": 18
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 19,
                  "offset": 18
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 19,
              "offset": 18
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "function"
        }
      },
      {
        "name": "end",
        "lineNumber": 5,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The end callback",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 17,
                      "offset": 16
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 17,
                  "offset": 16
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 17,
              "offset": 16
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "function"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "offObject - An object with off method for unbinding",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 52,
                      "offset": 51
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 52,
                  "offset": 51
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 52,
              "offset": 51
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      },
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "off - off method",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 17,
                      "offset": 16
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 17,
                  "offset": 16
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 17,
              "offset": 16
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.off"
        }
      }
    ],
    "name": "drag",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "drag"
      }
    ],
    "namespace": "drag"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Bind hover listener on each element of elements.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 49,
                  "offset": 48
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 49,
              "offset": 48
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 49,
          "offset": 48
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "The enter callback",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "function"
        },
        "name": "enter"
      },
      {
        "title": "param",
        "description": "The leave callback",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "function"
        },
        "name": "leave"
      },
      {
        "title": "return",
        "description": "offObject - An object with off method for unbinding",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      },
      {
        "title": "return",
        "description": "off - off method",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "object.off"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 11,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 26,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/events/hover.js",
      "code": "import forElements from '../core/forElements'\nimport on          from './on'\n\n/**\n * Bind hover listener on each element of elements.\n * @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n * @param {function} enter - The enter callback\n * @param {function} leave - The leave callback\n * @return {object} offObject - An object with off method for unbinding\n * @return {object.off} off - off method\n */\nexport default function hover (elements, enter, leave) {\n    forElements(elements, element => {\n        if (enter) on(element, 'mouseenter', enter)\n        if (leave) on(element, 'mouseleave', leave)\n    })\n\n    return {\n        off() {\n            forElements(elements, element => {\n                if (enter) off(element, 'mouseenter', enter)\n                if (leave) off(element, 'mouseleave', leave)\n            })\n        }\n    }\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "enter",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The enter callback",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 19,
                      "offset": 18
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 19,
                  "offset": 18
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 19,
              "offset": 18
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "function"
        }
      },
      {
        "name": "leave",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The leave callback",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 19,
                      "offset": 18
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 19,
                  "offset": 18
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 19,
              "offset": 18
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "function"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "offObject - An object with off method for unbinding",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 52,
                      "offset": 51
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 52,
                  "offset": 51
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 52,
              "offset": 51
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      },
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "off - off method",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 17,
                      "offset": 16
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 17,
                  "offset": 16
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 17,
              "offset": 16
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.off"
        }
      }
    ],
    "name": "hover",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "hover"
      }
    ],
    "namespace": "hover"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Bind hover listener on each element of elements.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 49,
                  "offset": 48
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 49,
              "offset": 48
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 49,
          "offset": 48
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "The callback on each load event",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "function"
        },
        "name": "eachCallback"
      },
      {
        "title": "param",
        "description": "The callback when all elements have been loaded",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "function"
        },
        "name": "allCallback"
      },
      {
        "title": "param",
        "description": "= true - Trigger only once for each media if true",
        "lineNumber": 5,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "bool"
          }
        },
        "name": "once"
      },
      {
        "title": "param",
        "description": "= true - If true callback will be called with error when an element doesn't have src",
        "lineNumber": 6,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "bool"
          }
        },
        "name": "testSrc"
      },
      {
        "title": "return",
        "description": "offObject - An object with off method for unbinding",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      },
      {
        "title": "return",
        "description": "off - off method",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "object.off"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 6,
        "column": 0
      },
      "end": {
        "line": 15,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 16,
          "column": 0
        },
        "end": {
          "line": 57,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/events/load.js",
      "code": "import forEach     from '../core/forEach'\nimport getElements from '../core/getElements'\nimport on          from './on'\nimport off         from './off'\n\n/**\n * Bind hover listener on each element of elements.\n * @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n * @param {function} eachCallback - The callback on each load event\n * @param {function} allCallback - The callback when all elements have been loaded\n * @param {bool} [once] = true - Trigger only once for each media if true\n * @param {bool} [testSrc] = true - If true callback will be called with error when an element doesn't have src\n * @return {object} offObject - An object with off method for unbinding\n * @return {object.off} off - off method\n */\nexport default function load (elements, eachCallback, allCallback, once = true, testSrc = true) {\n    elements = getElements(elements)\n\n    if (!elements || elements.length == 0) {\n        if (allCallback) allCallback()\n\n        return\n    }\n\n    let n = {\n        value: elements.length\n    }\n\n    callback = (event, element, error) => {\n        if (event) {\n            element = event.target\n            if (event.type == 'error') error = event\n        }\n\n        if (once)\n            off(element, 'load loadedmetadata error', callback)\n\n        if (eachCallback) eachCallback(element, error)\n\n        if (!(--n.value) && allCallback) allCallback()\n    }\n\n    forEach(elements, element => {\n        if (testSrc && !element.src)\n            callback(null, element, 'image without src')\n        else if (element.naturalWidth || element.loadedmetadata)\n            callback(null, element, null)\n        else\n            on(element, 'load loadedmetadata error', callback)\n    })\n\n    return {\n        off() {\n            forEach(elements, element => off(element, 'load loadedmetadata error', callback))\n        }\n    }\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "eachCallback",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The callback on each load event",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 32,
                      "offset": 31
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 32,
                  "offset": 31
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 32,
              "offset": 31
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "function"
        }
      },
      {
        "name": "allCallback",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The callback when all elements have been loaded",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 48,
                      "offset": 47
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 48,
                  "offset": 47
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 48,
              "offset": 47
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "function"
        }
      },
      {
        "name": "once",
        "lineNumber": 5,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "= true - Trigger only once for each media if true",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 50,
                      "offset": 49
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 50,
                  "offset": 49
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 50,
              "offset": 49
            }
          }
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "bool"
          }
        }
      },
      {
        "name": "testSrc",
        "lineNumber": 6,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "= true - If true callback will be called with error when an element doesn't have src",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 85,
                      "offset": 84
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 85,
                  "offset": 84
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 85,
              "offset": 84
            }
          }
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "bool"
          }
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "offObject - An object with off method for unbinding",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 52,
                      "offset": 51
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 52,
                  "offset": 51
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 52,
              "offset": 51
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      },
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "off - off method",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 17,
                      "offset": 16
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 17,
                  "offset": 16
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 17,
              "offset": 16
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.off"
        }
      }
    ],
    "name": "load",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "load"
      }
    ],
    "namespace": "load"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Bind hover listener on each element of elements.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 49,
                  "offset": 48
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 49,
              "offset": 48
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 49,
          "offset": 48
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "The events that should be bound seperated with spaces",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "events"
      },
      {
        "title": "param",
        "description": "The callback used for event binding",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "function"
        },
        "name": "callback"
      },
      {
        "title": "return",
        "description": "elements - The iterable for chaining",
        "lineNumber": 5,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 9,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 10,
          "column": 0
        },
        "end": {
          "line": 19,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/events/off.js",
      "code": "import forElements from '../core/forElements'\n\n/**\n * Bind hover listener on each element of elements.\n * @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n * @param {string} events - The events that should be bound seperated with spaces\n * @param {function} callback - The callback used for event binding\n * @return {string | Array | NodeList | HTMLCollection} elements - The iterable for chaining\n */\nexport default function off (elements, events, callback) {\n    events = events.split(' ')\n\n    return forElements(elements, element => {\n        if (!element.removeEventListener) return\n\n        let i = events.length\n        while(i--) element.removeEventListener(events[i], callback)\n    })\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "events",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The events that should be bound seperated with spaces",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 54,
                      "offset": 53
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 54,
                  "offset": 53
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 54,
              "offset": 53
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      },
      {
        "name": "callback",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The callback used for event binding",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 36,
                      "offset": 35
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 36,
                  "offset": 35
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 36,
              "offset": 35
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "function"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "elements - The iterable for chaining",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 37,
                      "offset": 36
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 37,
                  "offset": 36
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 37,
              "offset": 36
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "name": "off",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "off"
      }
    ],
    "namespace": "off"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Bind events listener on each element of elements.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 50,
                  "offset": 49
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 50,
              "offset": 49
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 50,
          "offset": 49
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "The events that should be bound seperated with spaces",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "events"
      },
      {
        "title": "param",
        "description": "The callback used for event binding",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "function"
        },
        "name": "callback"
      },
      {
        "title": "return",
        "description": "elements - The iterable for chaining",
        "lineNumber": 5,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 9,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 10,
          "column": 0
        },
        "end": {
          "line": 19,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/events/on.js",
      "code": "import forElements from '../core/forElements'\n\n/**\n * Bind events listener on each element of elements.\n * @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n * @param {string} events - The events that should be bound seperated with spaces\n * @param {function} callback - The callback used for event binding\n * @return {string | Array | NodeList | HTMLCollection} elements - The iterable for chaining\n */\nexport default function on (elements, events, callback) {\n    events = events.split(' ')\n\n    return forElements(elements, element => {\n        if (!element.addEventListener) return\n\n        let i = events.length\n        while(i--) element.addEventListener(events[i], callback)\n    })\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "events",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The events that should be bound seperated with spaces",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 54,
                      "offset": 53
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 54,
                  "offset": 53
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 54,
              "offset": 53
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      },
      {
        "name": "callback",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The callback used for event binding",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 36,
                      "offset": 35
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 36,
                  "offset": 35
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 36,
              "offset": 35
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "function"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "elements - The iterable for chaining",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 37,
                      "offset": 36
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 37,
                  "offset": 36
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 37,
              "offset": 36
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "name": "on",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "on"
      }
    ],
    "namespace": "on"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Bind events listener on each element of elements and unbind after first triggered.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 83,
                  "offset": 82
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 83,
              "offset": 82
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 83,
          "offset": 82
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "The events that should be bound seperated with spaces",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "events"
      },
      {
        "title": "param",
        "description": "The callback used for event binding",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "function"
        },
        "name": "callback"
      },
      {
        "title": "return",
        "description": "offObject - An object with off method for unbinding",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      },
      {
        "title": "return",
        "description": "off - off method",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "object.off"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 11,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 26,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/events/once.js",
      "code": "import on      from './on'\nimport off     from './off'\n\n/**\n * Bind events listener on each element of elements and unbind after first triggered.\n * @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n * @param {string} events - The events that should be bound seperated with spaces\n * @param {function} callback - The callback used for event binding\n * @return {object} offObject - An object with off method for unbinding\n * @return {object.off} off - off method\n */\nexport default function once (elements, events, callback) {\n    const innerCallback = (event) => {\n        callback(event)\n\n        off(elements, events, innerCallback)\n    }\n\n    on(elements, events, innerCallback)\n\n    return {\n        off() {\n            off(elements, events, innerCallback)\n        }\n    }\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "events",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The events that should be bound seperated with spaces",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 54,
                      "offset": 53
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 54,
                  "offset": 53
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 54,
              "offset": 53
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      },
      {
        "name": "callback",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The callback used for event binding",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 36,
                      "offset": 35
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 36,
                  "offset": 35
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 36,
              "offset": 35
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "function"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "offObject - An object with off method for unbinding",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 52,
                      "offset": 51
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 52,
                  "offset": 51
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 52,
              "offset": 51
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      },
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "off - off method",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 17,
                      "offset": 16
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 17,
                  "offset": 16
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 17,
              "offset": 16
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.off"
        }
      }
    ],
    "name": "once",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "once"
      }
    ],
    "namespace": "once"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Execute callback when dom is ready.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 36,
                  "offset": 35
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 36,
              "offset": 35
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 36,
          "offset": 35
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The callback",
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "function"
        },
        "name": "callback"
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 6,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 7,
          "column": 0
        },
        "end": {
          "line": 9,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/events/ready.js",
      "code": "import on from './on'\n\n/**\n * Execute callback when dom is ready.\n * @param {function} callback - The callback\n */\nexport default function ready (callback) {\n    on(document, 'DOMContentLoaded', callback)\n}\n"
    },
    "params": [
      {
        "name": "callback",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The callback",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 13,
                      "offset": 12
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 13,
                  "offset": 12
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 13,
              "offset": 12
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "function"
        }
      }
    ],
    "name": "ready",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "ready"
      }
    ],
    "namespace": "ready"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Trigger events on elements with data",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 37,
                  "offset": 36
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 37,
              "offset": 36
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 37,
          "offset": 36
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "The events that should be tiggered seperated with spaces",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "events"
      },
      {
        "title": "param",
        "description": "The events' data",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "data"
      },
      {
        "title": "return",
        "description": "elements - The iterable for chaining",
        "lineNumber": 5,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 10,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 11,
          "column": 0
        },
        "end": {
          "line": 35,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/events/trigger.js",
      "code": "import forElements from '../core/forElements'\nimport getElements from '../core/getElements'\n\n/**\n * Trigger events on elements with data\n * @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n * @param {string} events - The events that should be tiggered seperated with spaces\n * @param {object} data - The events' data\n * @return {string | Array | NodeList | HTMLCollection} elements - The iterable for chaining\n */\nexport default function trigger (elements, events, data) {\n    events = events.split(' ')\n    let i = events.length\n\n    elements = getElements(elements)\n\n    while(i--) {\n        let event = events[i]\n\n        if (window.CustomEvent) {\n            event = new CustomEvent(event, {detail: data})\n        } else {\n            event = document.createEvent('CustomEvent')\n            event.initCustomEvent(event, true, true, data)\n        }\n\n        forEach(elements, element => {\n            if (!element.dispatchEvent) return\n\n            element.dispatchEvent(event)\n        })\n    }\n\n    return elements\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "events",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The events that should be tiggered seperated with spaces",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 57,
                      "offset": 56
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 57,
                  "offset": 56
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 57,
              "offset": 56
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      },
      {
        "name": "data",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The events' data",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 17,
                      "offset": 16
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 17,
                  "offset": 16
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 17,
              "offset": 16
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "elements - The iterable for chaining",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 37,
                      "offset": 36
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 37,
                  "offset": 36
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 37,
              "offset": 36
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "name": "trigger",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "trigger"
      }
    ],
    "namespace": "trigger"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Get height in pixels of element.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 33,
                  "offset": 32
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 33,
              "offset": 32
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 33,
          "offset": 32
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The selector or dom element",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        },
        "name": "element"
      },
      {
        "title": "return",
        "description": "height - The height in pixels",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "number"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 7,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 8,
          "column": 0
        },
        "end": {
          "line": 12,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/styles/getHeight.js",
      "code": "import getElement from '../core/getElement'\n\n/**\n * Get height in pixels of element.\n * @param {string | window | document | HTMLElement | SVGElement} element - The selector or dom element\n * @return {number} height - The height in pixels\n */\nexport default function getHeight (element) {\n    element = getElement(element)\n\n    return !!element && element.offsetHeight\n}\n"
    },
    "params": [
      {
        "name": "element",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The selector or dom element",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 28,
                      "offset": 27
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 28,
                  "offset": 27
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 28,
              "offset": 27
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "height - The height in pixels",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 30,
                      "offset": 29
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 30,
                  "offset": 29
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 30,
              "offset": 29
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "number"
        }
      }
    ],
    "name": "getHeight",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "getHeight"
      }
    ],
    "namespace": "getHeight"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Get size in pixels of element.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 31,
                  "offset": 30
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 31,
              "offset": 30
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 31,
          "offset": 30
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The selector or dom element",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        },
        "name": "element"
      },
      {
        "title": "return",
        "description": "size - The size in pixels",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "number"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 7,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 8,
          "column": 1
        },
        "end": {
          "line": 15,
          "column": 2
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/styles/getSize.js",
      "code": "import getElement from '../core/getElement'\n\n/**\n * Get size in pixels of element.\n * @param {string | window | document | HTMLElement | SVGElement} element - The selector or dom element\n * @return {number} size - The size in pixels\n */\n export default function getSize (element) {\n    element = getElement(element)\n\n    return !!element && {\n        width: element.offsetWidth,\n        height: element.offsetHeight\n    }\n }\n"
    },
    "params": [
      {
        "name": "element",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The selector or dom element",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 28,
                      "offset": 27
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 28,
                  "offset": 27
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 28,
              "offset": 27
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "size - The size in pixels",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 26,
                      "offset": 25
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 26,
                  "offset": 25
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 26,
              "offset": 25
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "number"
        }
      }
    ],
    "name": "getSize",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "getSize"
      }
    ],
    "namespace": "getSize"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Get style property of element.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 31,
                  "offset": 30
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 31,
              "offset": 30
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 31,
          "offset": 30
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The selector or dom element",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        },
        "name": "element"
      },
      {
        "title": "return",
        "description": "value - The value for the property",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "number"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 7,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 8,
          "column": 0
        },
        "end": {
          "line": 15,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/styles/getStyle.js",
      "code": "import getElement from '../core/getElement'\n\n/**\n * Get style property of element.\n * @param {string | window | document | HTMLElement | SVGElement} element - The selector or dom element\n * @return {number} value - The value for the property\n */\nexport default function getStyle (element, property) {\n    element = getElement(element)\n    if (!element) return\n\n    let ret = getComputedStyle(element)[property]\n\n    return (ret.indexOf('px') == -1) ? ret : parseInt(ret, 10)\n}\n"
    },
    "params": [
      {
        "name": "element",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The selector or dom element",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 28,
                      "offset": 27
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 28,
                  "offset": 27
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 28,
              "offset": 27
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        }
      },
      {
        "title": "param",
        "name": "property",
        "lineNumber": 8
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "value - The value for the property",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 35,
                      "offset": 34
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 35,
                  "offset": 34
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 35,
              "offset": 34
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "number"
        }
      }
    ],
    "name": "getStyle",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "getStyle"
      }
    ],
    "namespace": "getStyle"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Get width in pixels of element.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 32,
                  "offset": 31
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 32,
              "offset": 31
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 32,
          "offset": 31
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The selector or dom element",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        },
        "name": "element"
      },
      {
        "title": "return",
        "description": "width - The width in pixels",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "number"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 7,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 8,
          "column": 0
        },
        "end": {
          "line": 12,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/styles/getWidth.js",
      "code": "import getElement from '../core/getElement'\n\n/**\n * Get width in pixels of element.\n * @param {string | window | document | HTMLElement | SVGElement} element - The selector or dom element\n * @return {number} width - The width in pixels\n */\nexport default function getWidth (element) {\n    element = getElement(element)\n\n    return !!element && element.offsetWidth\n}\n"
    },
    "params": [
      {
        "name": "element",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The selector or dom element",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 28,
                      "offset": 27
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 28,
                  "offset": 27
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 28,
              "offset": 27
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "width - The width in pixels",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 28,
                      "offset": 27
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 28,
                  "offset": 27
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 28,
              "offset": 27
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "number"
        }
      }
    ],
    "name": "getWidth",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "getWidth"
      }
    ],
    "namespace": "getWidth"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Get height in pixels of element or first element of elements if height is undefined,\nelse set height to all element of elements.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 2,
                  "column": 44,
                  "offset": 128
                },
                "indent": [
                  1
                ]
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 2,
              "column": 44,
              "offset": 128
            },
            "indent": [
              1
            ]
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 2,
          "column": 44,
          "offset": 128
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 3,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "The height",
        "lineNumber": 4,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "number"
          }
        },
        "name": "height"
      },
      {
        "title": "return",
        "description": "height | elements - The height in pixels | elements for chaining",
        "lineNumber": 5,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "number"
            },
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 10,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 11,
          "column": 0
        },
        "end": {
          "line": 15,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/styles/height.js",
      "code": "import setHeight from './setHeight'\nimport getHeight from './getHeight'\n\n/**\n * Get height in pixels of element or first element of elements if height is undefined,\n * else set height to all element of elements.\n * @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n * @param {number} [height] - The height\n * @return {number | string | Array | NodeList | HTMLCollection} height | elements - The height in pixels | elements for chaining\n */\nexport default function height (elements, height) {\n    return typeof height != 'undefined'\n         ? setHeight(elements, height)\n         : getHeight(elements)\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "height",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The height",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 11,
                      "offset": 10
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 11,
                  "offset": 10
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 11,
              "offset": 10
            }
          }
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "number"
          }
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "height | elements - The height in pixels | elements for chaining",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 65,
                      "offset": 64
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 65,
                  "offset": 64
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 65,
              "offset": 64
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "number"
            },
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "name": "height",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "height"
      }
    ],
    "namespace": "height"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Hide each element of elements using visibility.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 48,
                  "offset": 47
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 48,
              "offset": 47
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 48,
          "offset": 47
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "return",
        "description": "elements for chaining",
        "lineNumber": 3,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 7,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 8,
          "column": 1
        },
        "end": {
          "line": 14,
          "column": 2
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/styles/hide.js",
      "code": "import forElements from '../core/forElements'\n\n/**\n * Hide each element of elements using visibility.\n * @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n * @return {string | Array | NodeList | HTMLCollection} elements for chaining\n */\n export default function hide (elements) {\n    return forElements(elements, element => {\n        if (!element.style) return\n\n        element.style.visibility = 'hidden'\n    })\n }\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "elements for chaining",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 22,
                      "offset": 21
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 22,
                  "offset": 21
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 22,
              "offset": 21
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "name": "hide",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "hide"
      }
    ],
    "namespace": "hide"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Apply the provided transformation as a matrix (3D if supported) on each element of elements",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 92,
                  "offset": 91
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 92,
              "offset": 91
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 92,
          "offset": 91
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "The transformation object",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "transformation"
      },
      {
        "title": "param",
        "description": "translateX option",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "object.x"
        },
        "name": "x"
      },
      {
        "title": "param",
        "description": "translateY option",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "object.y"
        },
        "name": "y"
      },
      {
        "title": "param",
        "description": "translateZ option",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "object.z"
        },
        "name": "z"
      },
      {
        "title": "param",
        "description": "rotate option",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "object.rotate"
        },
        "name": "rotate"
      },
      {
        "title": "param",
        "description": "rotateX option",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "object.rotate.x"
        },
        "name": "x"
      },
      {
        "title": "param",
        "description": "rotateY option",
        "lineNumber": 9,
        "type": {
          "type": "NameExpression",
          "name": "object.rotate.y"
        },
        "name": "y"
      },
      {
        "title": "param",
        "description": "rotateZ option",
        "lineNumber": 10,
        "type": {
          "type": "NameExpression",
          "name": "object.rotate.z"
        },
        "name": "z"
      },
      {
        "title": "param",
        "description": "rotateX option",
        "lineNumber": 11,
        "type": {
          "type": "NameExpression",
          "name": "object.rotateX"
        },
        "name": "rotateX"
      },
      {
        "title": "param",
        "description": "rotateY option",
        "lineNumber": 12,
        "type": {
          "type": "NameExpression",
          "name": "object.rotateY"
        },
        "name": "rotateY"
      },
      {
        "title": "param",
        "description": "rotateZ option",
        "lineNumber": 13,
        "type": {
          "type": "NameExpression",
          "name": "object.rotateZ"
        },
        "name": "rotateZ"
      },
      {
        "title": "param",
        "description": "rotate option",
        "lineNumber": 14,
        "type": {
          "type": "NameExpression",
          "name": "object.rotate"
        },
        "name": "rotate"
      },
      {
        "title": "param",
        "description": "scale option",
        "lineNumber": 15,
        "type": {
          "type": "NameExpression",
          "name": "object.scale"
        },
        "name": "scale"
      },
      {
        "title": "param",
        "description": "scaleX option",
        "lineNumber": 16,
        "type": {
          "type": "NameExpression",
          "name": "object.scale.x"
        },
        "name": "x"
      },
      {
        "title": "param",
        "description": "scaleY option",
        "lineNumber": 17,
        "type": {
          "type": "NameExpression",
          "name": "object.scale.y"
        },
        "name": "y"
      },
      {
        "title": "param",
        "description": "scaleZ option",
        "lineNumber": 18,
        "type": {
          "type": "NameExpression",
          "name": "object.scale.z"
        },
        "name": "z"
      },
      {
        "title": "param",
        "description": "scaleX option",
        "lineNumber": 19,
        "type": {
          "type": "NameExpression",
          "name": "object.scaleX"
        },
        "name": "scaleX"
      },
      {
        "title": "param",
        "description": "scaleY option",
        "lineNumber": 20,
        "type": {
          "type": "NameExpression",
          "name": "object.scaleY"
        },
        "name": "scaleY"
      },
      {
        "title": "param",
        "description": "scaleZ option",
        "lineNumber": 21,
        "type": {
          "type": "NameExpression",
          "name": "object.scaleZ"
        },
        "name": "scaleZ"
      },
      {
        "title": "param",
        "description": "skew option",
        "lineNumber": 22,
        "type": {
          "type": "NameExpression",
          "name": "object.skew"
        },
        "name": "skew"
      },
      {
        "title": "param",
        "description": "skewX option",
        "lineNumber": 23,
        "type": {
          "type": "NameExpression",
          "name": "object.skew.x"
        },
        "name": "x"
      },
      {
        "title": "param",
        "description": "skewY option",
        "lineNumber": 24,
        "type": {
          "type": "NameExpression",
          "name": "object.skew.y"
        },
        "name": "y"
      },
      {
        "title": "param",
        "description": "skewX option",
        "lineNumber": 25,
        "type": {
          "type": "NameExpression",
          "name": "object.skewX"
        },
        "name": "skewX"
      },
      {
        "title": "param",
        "description": "skewY option",
        "lineNumber": 26,
        "type": {
          "type": "NameExpression",
          "name": "object.skewY"
        },
        "name": "skewY"
      },
      {
        "title": "return",
        "description": "elements for chaining",
        "lineNumber": 27,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 6,
        "column": 0
      },
      "end": {
        "line": 34,
        "column": 2
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 35,
          "column": 0
        },
        "end": {
          "line": 37,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/styles/matrix.js",
      "code": "import support3D from '../browser/support3D'\n\nimport matrix2D from './matrix2D'\nimport matrix3D from './matrix3D'\n\n/**\n* Apply the provided transformation as a matrix (3D if supported) on each element of elements\n* @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n* @param {object} transformation - The transformation object\n* @param {object.x} x - translateX option\n* @param {object.y} y - translateY option\n* @param {object.z} z - translateZ option\n* @param {object.rotate} rotate - rotate option\n* @param {object.rotate.x} x - rotateX option\n* @param {object.rotate.y} y - rotateY option\n* @param {object.rotate.z} z - rotateZ option\n* @param {object.rotateX} rotateX - rotateX option\n* @param {object.rotateY} rotateY - rotateY option\n* @param {object.rotateZ} rotateZ - rotateZ option\n* @param {object.rotate} rotate - rotate option\n* @param {object.scale} scale - scale option\n* @param {object.scale.x} x - scaleX option\n* @param {object.scale.y} y - scaleY option\n* @param {object.scale.z} z - scaleZ option\n* @param {object.scaleX} scaleX - scaleX option\n* @param {object.scaleY} scaleY - scaleY option\n* @param {object.scaleZ} scaleZ - scaleZ option\n* @param {object.skew} skew - skew option\n* @param {object.skew.x} x - skewX option\n* @param {object.skew.y} y - skewY option\n* @param {object.skewX} skewX - skewX option\n* @param {object.skewY} skewY - skewY option\n* @return {string | Array | NodeList | HTMLCollection} elements for chaining\n*/\nexport default function matrix (elements, transformation) {\n    return support3D ? matrix3D(elements, transformation) : matrix2D(elements, transformation)\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "skewY",
        "lineNumber": 26,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "skewY option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 13,
                      "offset": 12
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 13,
                  "offset": 12
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 13,
              "offset": 12
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.skewY"
        }
      },
      {
        "name": "x",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "translateX option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 18,
                      "offset": 17
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 18,
                  "offset": 17
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 18,
              "offset": 17
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.x"
        }
      },
      {
        "name": "y",
        "lineNumber": 5,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "translateY option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 18,
                      "offset": 17
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 18,
                  "offset": 17
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 18,
              "offset": 17
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.y"
        }
      },
      {
        "name": "z",
        "lineNumber": 6,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "translateZ option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 18,
                      "offset": 17
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 18,
                  "offset": 17
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 18,
              "offset": 17
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.z"
        }
      },
      {
        "name": "rotate",
        "lineNumber": 7,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "rotate option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.rotate"
        }
      },
      {
        "name": "x",
        "lineNumber": 8,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "rotateX option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 15,
                      "offset": 14
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 15,
                  "offset": 14
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 15,
              "offset": 14
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.rotate.x"
        }
      },
      {
        "name": "y",
        "lineNumber": 9,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "rotateY option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 15,
                      "offset": 14
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 15,
                  "offset": 14
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 15,
              "offset": 14
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.rotate.y"
        }
      },
      {
        "name": "z",
        "lineNumber": 10,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "rotateZ option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 15,
                      "offset": 14
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 15,
                  "offset": 14
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 15,
              "offset": 14
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.rotate.z"
        }
      },
      {
        "name": "rotateX",
        "lineNumber": 11,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "rotateX option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 15,
                      "offset": 14
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 15,
                  "offset": 14
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 15,
              "offset": 14
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.rotateX"
        }
      },
      {
        "name": "rotateY",
        "lineNumber": 12,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "rotateY option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 15,
                      "offset": 14
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 15,
                  "offset": 14
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 15,
              "offset": 14
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.rotateY"
        }
      },
      {
        "name": "rotateZ",
        "lineNumber": 13,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "rotateZ option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 15,
                      "offset": 14
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 15,
                  "offset": 14
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 15,
              "offset": 14
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.rotateZ"
        }
      },
      {
        "name": "transformation",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The transformation object",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 26,
                      "offset": 25
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 26,
                  "offset": 25
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 26,
              "offset": 25
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      },
      {
        "name": "scale",
        "lineNumber": 15,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scale option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 13,
                      "offset": 12
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 13,
                  "offset": 12
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 13,
              "offset": 12
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scale"
        }
      },
      {
        "name": "x",
        "lineNumber": 16,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scaleX option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scale.x"
        }
      },
      {
        "name": "y",
        "lineNumber": 17,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scaleY option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scale.y"
        }
      },
      {
        "name": "z",
        "lineNumber": 18,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scaleZ option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scale.z"
        }
      },
      {
        "name": "scaleX",
        "lineNumber": 19,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scaleX option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scaleX"
        }
      },
      {
        "name": "scaleY",
        "lineNumber": 20,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scaleY option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scaleY"
        }
      },
      {
        "name": "scaleZ",
        "lineNumber": 21,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scaleZ option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scaleZ"
        }
      },
      {
        "name": "skew",
        "lineNumber": 22,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "skew option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 12,
                      "offset": 11
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 12,
                  "offset": 11
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 12,
              "offset": 11
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.skew"
        }
      },
      {
        "name": "x",
        "lineNumber": 23,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "skewX option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 13,
                      "offset": 12
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 13,
                  "offset": 12
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 13,
              "offset": 12
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.skew.x"
        }
      },
      {
        "name": "y",
        "lineNumber": 24,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "skewY option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 13,
                      "offset": 12
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 13,
                  "offset": 12
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 13,
              "offset": 12
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.skew.y"
        }
      },
      {
        "name": "skewX",
        "lineNumber": 25,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "skewX option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 13,
                      "offset": 12
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 13,
                  "offset": 12
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 13,
              "offset": 12
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.skewX"
        }
      },
      {
        "name": "rotate",
        "lineNumber": 14,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "rotate option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.rotate"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "elements for chaining",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 22,
                      "offset": 21
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 22,
                  "offset": 21
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 22,
              "offset": 21
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "name": "matrix",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "matrix"
      }
    ],
    "namespace": "matrix"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Apply the provided transformation as a 2D matrix on each element of elements",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 77,
                  "offset": 76
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 77,
              "offset": 76
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 77,
          "offset": 76
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "The transformation object",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "transformation"
      },
      {
        "title": "param",
        "description": "translateX option",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "object.x"
        },
        "name": "x"
      },
      {
        "title": "param",
        "description": "translateY option",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "object.y"
        },
        "name": "y"
      },
      {
        "title": "param",
        "description": "rotate option",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "object.rotate"
        },
        "name": "rotate"
      },
      {
        "title": "param",
        "description": "rotateX option",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "object.rotate.x"
        },
        "name": "x"
      },
      {
        "title": "param",
        "description": "rotateY option",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "object.rotate.y"
        },
        "name": "y"
      },
      {
        "title": "param",
        "description": "rotateX option",
        "lineNumber": 9,
        "type": {
          "type": "NameExpression",
          "name": "object.rotateX"
        },
        "name": "rotateX"
      },
      {
        "title": "param",
        "description": "rotateY option",
        "lineNumber": 10,
        "type": {
          "type": "NameExpression",
          "name": "object.rotateY"
        },
        "name": "rotateY"
      },
      {
        "title": "param",
        "description": "rotate option",
        "lineNumber": 11,
        "type": {
          "type": "NameExpression",
          "name": "object.rotate"
        },
        "name": "rotate"
      },
      {
        "title": "param",
        "description": "scale option",
        "lineNumber": 12,
        "type": {
          "type": "NameExpression",
          "name": "object.scale"
        },
        "name": "scale"
      },
      {
        "title": "param",
        "description": "scaleX option",
        "lineNumber": 13,
        "type": {
          "type": "NameExpression",
          "name": "object.scale.x"
        },
        "name": "x"
      },
      {
        "title": "param",
        "description": "scaleY option",
        "lineNumber": 14,
        "type": {
          "type": "NameExpression",
          "name": "object.scale.y"
        },
        "name": "y"
      },
      {
        "title": "param",
        "description": "scaleX option",
        "lineNumber": 15,
        "type": {
          "type": "NameExpression",
          "name": "object.scaleX"
        },
        "name": "scaleX"
      },
      {
        "title": "param",
        "description": "scaleY option",
        "lineNumber": 16,
        "type": {
          "type": "NameExpression",
          "name": "object.scaleY"
        },
        "name": "scaleY"
      },
      {
        "title": "param",
        "description": "skew option",
        "lineNumber": 17,
        "type": {
          "type": "NameExpression",
          "name": "object.skew"
        },
        "name": "skew"
      },
      {
        "title": "param",
        "description": "skewX option",
        "lineNumber": 18,
        "type": {
          "type": "NameExpression",
          "name": "object.skew.x"
        },
        "name": "x"
      },
      {
        "title": "param",
        "description": "skewY option",
        "lineNumber": 19,
        "type": {
          "type": "NameExpression",
          "name": "object.skew.y"
        },
        "name": "y"
      },
      {
        "title": "param",
        "description": "skewX option",
        "lineNumber": 20,
        "type": {
          "type": "NameExpression",
          "name": "object.skewX"
        },
        "name": "skewX"
      },
      {
        "title": "param",
        "description": "skewY option",
        "lineNumber": 21,
        "type": {
          "type": "NameExpression",
          "name": "object.skewY"
        },
        "name": "skewY"
      },
      {
        "title": "return",
        "description": "elements for chaining",
        "lineNumber": 22,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 5,
        "column": 0
      },
      "end": {
        "line": 28,
        "column": 2
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 29,
          "column": 0
        },
        "end": {
          "line": 40,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/styles/matrix2D.js",
      "code": "import forElements         from '../core/forElements'\nimport prefix              from '../browser/prefix'\nimport transformTo2DMatrix from '../utils/transformTo2DMatrix'\n\n/**\n* Apply the provided transformation as a 2D matrix on each element of elements\n* @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n* @param {object} transformation - The transformation object\n* @param {object.x} x - translateX option\n* @param {object.y} y - translateY option\n* @param {object.rotate} rotate - rotate option\n* @param {object.rotate.x} x - rotateX option\n* @param {object.rotate.y} y - rotateY option\n* @param {object.rotateX} rotateX - rotateX option\n* @param {object.rotateY} rotateY - rotateY option\n* @param {object.rotate} rotate - rotate option\n* @param {object.scale} scale - scale option\n* @param {object.scale.x} x - scaleX option\n* @param {object.scale.y} y - scaleY option\n* @param {object.scaleX} scaleX - scaleX option\n* @param {object.scaleY} scaleY - scaleY option\n* @param {object.skew} skew - skew option\n* @param {object.skew.x} x - skewX option\n* @param {object.skew.y} y - skewY option\n* @param {object.skewX} skewX - skewX option\n* @param {object.skewY} skewY - skewY option\n* @return {string | Array | NodeList | HTMLCollection} elements for chaining\n*/\nexport default function matrix2D (elements, transformation) {\n    let matrix = transformTo2DMatrix(transformation)\n\n    matrix = `matrix(${matrix.join(',')})`\n\n    return forElements(elements, element => {\n        if (!element.style) return\n\n        element.style[`${prefix}transform`] = matrix\n        element.style.transform             = matrix\n    })\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "skewY",
        "lineNumber": 21,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "skewY option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 13,
                      "offset": 12
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 13,
                  "offset": 12
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 13,
              "offset": 12
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.skewY"
        }
      },
      {
        "name": "x",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "translateX option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 18,
                      "offset": 17
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 18,
                  "offset": 17
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 18,
              "offset": 17
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.x"
        }
      },
      {
        "name": "y",
        "lineNumber": 5,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "translateY option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 18,
                      "offset": 17
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 18,
                  "offset": 17
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 18,
              "offset": 17
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.y"
        }
      },
      {
        "name": "rotate",
        "lineNumber": 6,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "rotate option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.rotate"
        }
      },
      {
        "name": "x",
        "lineNumber": 7,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "rotateX option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 15,
                      "offset": 14
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 15,
                  "offset": 14
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 15,
              "offset": 14
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.rotate.x"
        }
      },
      {
        "name": "y",
        "lineNumber": 8,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "rotateY option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 15,
                      "offset": 14
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 15,
                  "offset": 14
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 15,
              "offset": 14
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.rotate.y"
        }
      },
      {
        "name": "rotateX",
        "lineNumber": 9,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "rotateX option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 15,
                      "offset": 14
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 15,
                  "offset": 14
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 15,
              "offset": 14
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.rotateX"
        }
      },
      {
        "name": "rotateY",
        "lineNumber": 10,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "rotateY option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 15,
                      "offset": 14
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 15,
                  "offset": 14
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 15,
              "offset": 14
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.rotateY"
        }
      },
      {
        "name": "rotate",
        "lineNumber": 11,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "rotate option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.rotate"
        }
      },
      {
        "name": "transformation",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The transformation object",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 26,
                      "offset": 25
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 26,
                  "offset": 25
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 26,
              "offset": 25
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      },
      {
        "name": "x",
        "lineNumber": 13,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scaleX option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scale.x"
        }
      },
      {
        "name": "y",
        "lineNumber": 14,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scaleY option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scale.y"
        }
      },
      {
        "name": "scaleX",
        "lineNumber": 15,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scaleX option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scaleX"
        }
      },
      {
        "name": "scaleY",
        "lineNumber": 16,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scaleY option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scaleY"
        }
      },
      {
        "name": "skew",
        "lineNumber": 17,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "skew option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 12,
                      "offset": 11
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 12,
                  "offset": 11
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 12,
              "offset": 11
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.skew"
        }
      },
      {
        "name": "x",
        "lineNumber": 18,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "skewX option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 13,
                      "offset": 12
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 13,
                  "offset": 12
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 13,
              "offset": 12
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.skew.x"
        }
      },
      {
        "name": "y",
        "lineNumber": 19,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "skewY option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 13,
                      "offset": 12
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 13,
                  "offset": 12
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 13,
              "offset": 12
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.skew.y"
        }
      },
      {
        "name": "skewX",
        "lineNumber": 20,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "skewX option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 13,
                      "offset": 12
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 13,
                  "offset": 12
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 13,
              "offset": 12
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.skewX"
        }
      },
      {
        "name": "scale",
        "lineNumber": 12,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scale option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 13,
                      "offset": 12
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 13,
                  "offset": 12
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 13,
              "offset": 12
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scale"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "elements for chaining",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 22,
                      "offset": 21
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 22,
                  "offset": 21
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 22,
              "offset": 21
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "name": "matrix2D",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "matrix2D"
      }
    ],
    "namespace": "matrix2D"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Apply the provided transformation as a 3D matrix on each element of elements",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 77,
                  "offset": 76
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 77,
              "offset": 76
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 77,
          "offset": 76
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "The transformation object",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "transformation"
      },
      {
        "title": "param",
        "description": "translateX option",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "object.x"
        },
        "name": "x"
      },
      {
        "title": "param",
        "description": "translateY option",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "object.y"
        },
        "name": "y"
      },
      {
        "title": "param",
        "description": "translateZ option",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "object.z"
        },
        "name": "z"
      },
      {
        "title": "param",
        "description": "rotate option",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "object.rotate"
        },
        "name": "rotate"
      },
      {
        "title": "param",
        "description": "rotateX option",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "object.rotate.x"
        },
        "name": "x"
      },
      {
        "title": "param",
        "description": "rotateY option",
        "lineNumber": 9,
        "type": {
          "type": "NameExpression",
          "name": "object.rotate.y"
        },
        "name": "y"
      },
      {
        "title": "param",
        "description": "rotateZ option",
        "lineNumber": 10,
        "type": {
          "type": "NameExpression",
          "name": "object.rotate.z"
        },
        "name": "z"
      },
      {
        "title": "param",
        "description": "rotateX option",
        "lineNumber": 11,
        "type": {
          "type": "NameExpression",
          "name": "object.rotateX"
        },
        "name": "rotateX"
      },
      {
        "title": "param",
        "description": "rotateY option",
        "lineNumber": 12,
        "type": {
          "type": "NameExpression",
          "name": "object.rotateY"
        },
        "name": "rotateY"
      },
      {
        "title": "param",
        "description": "rotateZ option",
        "lineNumber": 13,
        "type": {
          "type": "NameExpression",
          "name": "object.rotateZ"
        },
        "name": "rotateZ"
      },
      {
        "title": "param",
        "description": "rotate option",
        "lineNumber": 14,
        "type": {
          "type": "NameExpression",
          "name": "object.rotate"
        },
        "name": "rotate"
      },
      {
        "title": "param",
        "description": "scale option",
        "lineNumber": 15,
        "type": {
          "type": "NameExpression",
          "name": "object.scale"
        },
        "name": "scale"
      },
      {
        "title": "param",
        "description": "scaleX option",
        "lineNumber": 16,
        "type": {
          "type": "NameExpression",
          "name": "object.scale.x"
        },
        "name": "x"
      },
      {
        "title": "param",
        "description": "scaleY option",
        "lineNumber": 17,
        "type": {
          "type": "NameExpression",
          "name": "object.scale.y"
        },
        "name": "y"
      },
      {
        "title": "param",
        "description": "scaleZ option",
        "lineNumber": 18,
        "type": {
          "type": "NameExpression",
          "name": "object.scale.z"
        },
        "name": "z"
      },
      {
        "title": "param",
        "description": "scaleX option",
        "lineNumber": 19,
        "type": {
          "type": "NameExpression",
          "name": "object.scaleX"
        },
        "name": "scaleX"
      },
      {
        "title": "param",
        "description": "scaleY option",
        "lineNumber": 20,
        "type": {
          "type": "NameExpression",
          "name": "object.scaleY"
        },
        "name": "scaleY"
      },
      {
        "title": "param",
        "description": "scaleZ option",
        "lineNumber": 21,
        "type": {
          "type": "NameExpression",
          "name": "object.scaleZ"
        },
        "name": "scaleZ"
      },
      {
        "title": "param",
        "description": "skew option",
        "lineNumber": 22,
        "type": {
          "type": "NameExpression",
          "name": "object.skew"
        },
        "name": "skew"
      },
      {
        "title": "param",
        "description": "skewX option",
        "lineNumber": 23,
        "type": {
          "type": "NameExpression",
          "name": "object.skew.x"
        },
        "name": "x"
      },
      {
        "title": "param",
        "description": "skewY option",
        "lineNumber": 24,
        "type": {
          "type": "NameExpression",
          "name": "object.skew.y"
        },
        "name": "y"
      },
      {
        "title": "param",
        "description": "skewX option",
        "lineNumber": 25,
        "type": {
          "type": "NameExpression",
          "name": "object.skewX"
        },
        "name": "skewX"
      },
      {
        "title": "param",
        "description": "skewY option",
        "lineNumber": 26,
        "type": {
          "type": "NameExpression",
          "name": "object.skewY"
        },
        "name": "skewY"
      },
      {
        "title": "return",
        "description": "elements for chaining",
        "lineNumber": 27,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 5,
        "column": 0
      },
      "end": {
        "line": 33,
        "column": 2
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 34,
          "column": 0
        },
        "end": {
          "line": 45,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/styles/matrix3D.js",
      "code": "import forElements         from '../core/forElements'\nimport prefix              from '../browser/prefix'\nimport transformTo3DMatrix from '../utils/transformTo3DMatrix'\n\n/**\n* Apply the provided transformation as a 3D matrix on each element of elements\n* @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n* @param {object} transformation - The transformation object\n* @param {object.x} x - translateX option\n* @param {object.y} y - translateY option\n* @param {object.z} z - translateZ option\n* @param {object.rotate} rotate - rotate option\n* @param {object.rotate.x} x - rotateX option\n* @param {object.rotate.y} y - rotateY option\n* @param {object.rotate.z} z - rotateZ option\n* @param {object.rotateX} rotateX - rotateX option\n* @param {object.rotateY} rotateY - rotateY option\n* @param {object.rotateZ} rotateZ - rotateZ option\n* @param {object.rotate} rotate - rotate option\n* @param {object.scale} scale - scale option\n* @param {object.scale.x} x - scaleX option\n* @param {object.scale.y} y - scaleY option\n* @param {object.scale.z} z - scaleZ option\n* @param {object.scaleX} scaleX - scaleX option\n* @param {object.scaleY} scaleY - scaleY option\n* @param {object.scaleZ} scaleZ - scaleZ option\n* @param {object.skew} skew - skew option\n* @param {object.skew.x} x - skewX option\n* @param {object.skew.y} y - skewY option\n* @param {object.skewX} skewX - skewX option\n* @param {object.skewY} skewY - skewY option\n* @return {string | Array | NodeList | HTMLCollection} elements for chaining\n*/\nexport default function matrix3D (elements, transformation) {\n    let matrix = transformTo3DMatrix(transformation)\n\n    matrix = `matrix3D(${matrix.join(',')})`\n\n    return forElements(elements, element => {\n        if (!element.style) return\n\n        element.style[`${prefix}transform`] = matrix\n        element.style.transform             = matrix\n    })\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "skewY",
        "lineNumber": 26,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "skewY option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 13,
                      "offset": 12
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 13,
                  "offset": 12
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 13,
              "offset": 12
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.skewY"
        }
      },
      {
        "name": "x",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "translateX option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 18,
                      "offset": 17
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 18,
                  "offset": 17
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 18,
              "offset": 17
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.x"
        }
      },
      {
        "name": "y",
        "lineNumber": 5,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "translateY option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 18,
                      "offset": 17
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 18,
                  "offset": 17
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 18,
              "offset": 17
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.y"
        }
      },
      {
        "name": "z",
        "lineNumber": 6,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "translateZ option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 18,
                      "offset": 17
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 18,
                  "offset": 17
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 18,
              "offset": 17
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.z"
        }
      },
      {
        "name": "rotate",
        "lineNumber": 7,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "rotate option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.rotate"
        }
      },
      {
        "name": "x",
        "lineNumber": 8,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "rotateX option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 15,
                      "offset": 14
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 15,
                  "offset": 14
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 15,
              "offset": 14
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.rotate.x"
        }
      },
      {
        "name": "y",
        "lineNumber": 9,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "rotateY option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 15,
                      "offset": 14
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 15,
                  "offset": 14
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 15,
              "offset": 14
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.rotate.y"
        }
      },
      {
        "name": "z",
        "lineNumber": 10,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "rotateZ option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 15,
                      "offset": 14
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 15,
                  "offset": 14
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 15,
              "offset": 14
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.rotate.z"
        }
      },
      {
        "name": "rotateX",
        "lineNumber": 11,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "rotateX option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 15,
                      "offset": 14
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 15,
                  "offset": 14
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 15,
              "offset": 14
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.rotateX"
        }
      },
      {
        "name": "rotateY",
        "lineNumber": 12,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "rotateY option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 15,
                      "offset": 14
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 15,
                  "offset": 14
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 15,
              "offset": 14
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.rotateY"
        }
      },
      {
        "name": "rotateZ",
        "lineNumber": 13,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "rotateZ option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 15,
                      "offset": 14
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 15,
                  "offset": 14
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 15,
              "offset": 14
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.rotateZ"
        }
      },
      {
        "name": "transformation",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The transformation object",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 26,
                      "offset": 25
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 26,
                  "offset": 25
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 26,
              "offset": 25
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      },
      {
        "name": "scale",
        "lineNumber": 15,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scale option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 13,
                      "offset": 12
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 13,
                  "offset": 12
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 13,
              "offset": 12
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scale"
        }
      },
      {
        "name": "x",
        "lineNumber": 16,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scaleX option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scale.x"
        }
      },
      {
        "name": "y",
        "lineNumber": 17,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scaleY option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scale.y"
        }
      },
      {
        "name": "z",
        "lineNumber": 18,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scaleZ option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scale.z"
        }
      },
      {
        "name": "scaleX",
        "lineNumber": 19,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scaleX option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scaleX"
        }
      },
      {
        "name": "scaleY",
        "lineNumber": 20,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scaleY option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scaleY"
        }
      },
      {
        "name": "scaleZ",
        "lineNumber": 21,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scaleZ option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scaleZ"
        }
      },
      {
        "name": "skew",
        "lineNumber": 22,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "skew option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 12,
                      "offset": 11
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 12,
                  "offset": 11
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 12,
              "offset": 11
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.skew"
        }
      },
      {
        "name": "x",
        "lineNumber": 23,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "skewX option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 13,
                      "offset": 12
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 13,
                  "offset": 12
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 13,
              "offset": 12
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.skew.x"
        }
      },
      {
        "name": "y",
        "lineNumber": 24,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "skewY option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 13,
                      "offset": 12
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 13,
                  "offset": 12
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 13,
              "offset": 12
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.skew.y"
        }
      },
      {
        "name": "skewX",
        "lineNumber": 25,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "skewX option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 13,
                      "offset": 12
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 13,
                  "offset": 12
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 13,
              "offset": 12
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.skewX"
        }
      },
      {
        "name": "rotate",
        "lineNumber": 14,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "rotate option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.rotate"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "elements for chaining",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 22,
                      "offset": 21
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 22,
                  "offset": 21
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 22,
              "offset": 21
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "name": "matrix3D",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "matrix3D"
      }
    ],
    "namespace": "matrix3D"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Return the top and left offset of an element. Offset is relative to web page",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 77,
                  "offset": 76
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 77,
              "offset": 76
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 77,
          "offset": 76
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The selector or dom element",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        },
        "name": "element"
      },
      {
        "title": "return",
        "description": "offset",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      },
      {
        "title": "return",
        "description": "top offset",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "object.top"
        }
      },
      {
        "title": "return",
        "description": "left offset",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "object.left"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 9,
        "column": 2
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 10,
          "column": 0
        },
        "end": {
          "line": 20,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/styles/offset.js",
      "code": "import getElement from '../core/getElement'\n\n/**\n* Return the top and left offset of an element. Offset is relative to web page\n* @param {string | window | document | HTMLElement | SVGElement} element - The selector or dom element\n* @return {object} offset\n* @return {object.top} top offset\n* @return {object.left} left offset\n*/\nexport default function offset (element) {\n    element = getElement(element)\n    if (!element) return false\n\n    let rect = element.getBoundingClientRect()\n\n    return {\n        top: rect.top + (document.documentElement.scrollTop || document.body.scrollTop),\n        left: rect.left + (document.documentElement.scrollLeft || document.body.scrollLeft)\n    }\n}\n"
    },
    "params": [
      {
        "name": "element",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The selector or dom element",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 28,
                      "offset": 27
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 28,
                  "offset": 27
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 28,
              "offset": 27
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "offset",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 7,
                      "offset": 6
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 7,
                  "offset": 6
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 7,
              "offset": 6
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      },
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "top offset",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 11,
                      "offset": 10
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 11,
                  "offset": 10
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 11,
              "offset": 10
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.top"
        }
      },
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "left offset",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 12,
                      "offset": 11
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 12,
                  "offset": 11
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 12,
              "offset": 11
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.left"
        }
      }
    ],
    "name": "offset",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "offset"
      }
    ],
    "namespace": "offset"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Return the top and left position of an element. Position is relative to parent",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 79,
                  "offset": 78
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 79,
              "offset": 78
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 79,
          "offset": 78
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The selector or dom element",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        },
        "name": "element"
      },
      {
        "title": "return",
        "description": "position",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 7,
        "column": 2
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 8,
          "column": 0
        },
        "end": {
          "line": 15,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/styles/position.js",
      "code": "import getElement from '../core/getElement'\n\n/**\n* Return the top and left position of an element. Position is relative to parent\n* @param {string | window | document | HTMLElement | SVGElement} element - The selector or dom element\n* @return {object} position\n*/\nexport default function position (element) {\n    element = getElement(element)\n\n    return !!element && {\n        top: element.offsetTop,\n        left: element.offsetLeft\n    }\n}\n"
    },
    "params": [
      {
        "name": "element",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The selector or dom element",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 28,
                      "offset": 27
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 28,
                  "offset": 27
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 28,
              "offset": 27
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "position",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 9,
                      "offset": 8
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 9,
                  "offset": 8
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 9,
              "offset": 8
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      }
    ],
    "name": "position",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "position"
      }
    ],
    "namespace": "position"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Apply the provided scale transformation (3D if supported) on each element of elements",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 86,
                  "offset": 85
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 86,
              "offset": 85
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 86,
          "offset": 85
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "The transformation object",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "transformation"
      },
      {
        "title": "param",
        "description": "scale option",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "object.scale"
        },
        "name": "scale"
      },
      {
        "title": "param",
        "description": "scaleX option",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "object.scale.x"
        },
        "name": "x"
      },
      {
        "title": "param",
        "description": "scaleY option",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "object.scale.y"
        },
        "name": "y"
      },
      {
        "title": "param",
        "description": "scaleZ option",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "object.scale.z"
        },
        "name": "z"
      },
      {
        "title": "param",
        "description": "scaleX option",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "object.scaleX"
        },
        "name": "scaleX"
      },
      {
        "title": "param",
        "description": "scaleY option",
        "lineNumber": 9,
        "type": {
          "type": "NameExpression",
          "name": "object.scaleY"
        },
        "name": "scaleY"
      },
      {
        "title": "param",
        "description": "scaleZ option",
        "lineNumber": 10,
        "type": {
          "type": "NameExpression",
          "name": "object.scaleZ"
        },
        "name": "scaleZ"
      },
      {
        "title": "param",
        "description": "Preserve previous transformation",
        "lineNumber": 11,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "bool"
          }
        },
        "name": "keep"
      },
      {
        "title": "return",
        "description": "elements for chaining",
        "lineNumber": 12,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 6,
        "column": 0
      },
      "end": {
        "line": 19,
        "column": 2
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 20,
          "column": 0
        },
        "end": {
          "line": 22,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/styles/scale.js",
      "code": "import support3D from '../browser/support3D'\n\nimport scale2D from './scale2D'\nimport scale3D from './scale3D'\n\n/**\n* Apply the provided scale transformation (3D if supported) on each element of elements\n* @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n* @param {object} transformation - The transformation object\n* @param {object.scale} scale - scale option\n* @param {object.scale.x} x - scaleX option\n* @param {object.scale.y} y - scaleY option\n* @param {object.scale.z} z - scaleZ option\n* @param {object.scaleX} scaleX - scaleX option\n* @param {object.scaleY} scaleY - scaleY option\n* @param {object.scaleZ} scaleZ - scaleZ option\n* @param {bool} [keep] - Preserve previous transformation\n* @return {string | Array | NodeList | HTMLCollection} elements for chaining\n*/\nexport default function scale (elements, transformation, keep) {\n    return support3D ? scale3D(elements, transformation, keep) : scale2D(elements, transformation, keep)\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "transformation",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The transformation object",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 26,
                      "offset": 25
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 26,
                  "offset": 25
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 26,
              "offset": 25
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      },
      {
        "name": "scale",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scale option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 13,
                      "offset": 12
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 13,
                  "offset": 12
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 13,
              "offset": 12
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scale"
        }
      },
      {
        "name": "x",
        "lineNumber": 5,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scaleX option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scale.x"
        }
      },
      {
        "name": "y",
        "lineNumber": 6,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scaleY option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scale.y"
        }
      },
      {
        "name": "z",
        "lineNumber": 7,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scaleZ option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scale.z"
        }
      },
      {
        "name": "scaleX",
        "lineNumber": 8,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scaleX option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scaleX"
        }
      },
      {
        "name": "scaleY",
        "lineNumber": 9,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scaleY option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scaleY"
        }
      },
      {
        "name": "scaleZ",
        "lineNumber": 10,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scaleZ option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scaleZ"
        }
      },
      {
        "name": "keep",
        "lineNumber": 11,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Preserve previous transformation",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 33,
                      "offset": 32
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 33,
                  "offset": 32
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 33,
              "offset": 32
            }
          }
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "bool"
          }
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "elements for chaining",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 22,
                      "offset": 21
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 22,
                  "offset": 21
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 22,
              "offset": 21
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "name": "scale",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "scale"
      }
    ],
    "namespace": "scale"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Apply the provided scale transformation on each element of elements",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 68,
                  "offset": 67
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 68,
              "offset": 67
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 68,
          "offset": 67
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "The transformation object",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "transformation"
      },
      {
        "title": "param",
        "description": "scale option",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "object.scale"
        },
        "name": "scale"
      },
      {
        "title": "param",
        "description": "scaleX option",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "object.scale.x"
        },
        "name": "x"
      },
      {
        "title": "param",
        "description": "scaleY option",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "object.scale.y"
        },
        "name": "y"
      },
      {
        "title": "param",
        "description": "scaleX option",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "object.scaleX"
        },
        "name": "scaleX"
      },
      {
        "title": "param",
        "description": "scaleY option",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "object.scaleY"
        },
        "name": "scaleY"
      },
      {
        "title": "param",
        "description": "Preserve previous transformation",
        "lineNumber": 9,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "bool"
          }
        },
        "name": "keep"
      },
      {
        "title": "return",
        "description": "elements for chaining",
        "lineNumber": 10,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 15,
        "column": 2
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 16,
          "column": 0
        },
        "end": {
          "line": 47,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/styles/scale2D.js",
      "code": "import forElements from '../core/forElements'\nimport prefix      from '../browser/prefix'\n\n/**\n* Apply the provided scale transformation on each element of elements\n* @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n* @param {object} transformation - The transformation object\n* @param {object.scale} scale - scale option\n* @param {object.scale.x} x - scaleX option\n* @param {object.scale.y} y - scaleY option\n* @param {object.scaleX} scaleX - scaleX option\n* @param {object.scaleY} scaleY - scaleY option\n* @param {bool} [keep] - Preserve previous transformation\n* @return {string | Array | NodeList | HTMLCollection} elements for chaining\n*/\nexport default function scale2D (elements, transformation, keep) {\n    const scaleX = 'scaleX' in transformation ?\n                    transformation.scaleX :\n                    ('scale' in transformation ?\n                        ('x' in transformation.scale ?\n                            transformation.scale.x :\n                            transformation.scale)\n                                : 1)\n\n    const scaleY = 'scaleY' in transformation ?\n                    transformation.scaleY :\n                    ('scale' in transformation ?\n                        ('y' in transformation.scale ?\n                            transformation.scale.y :\n                            transformation.scale)\n                                : 1)\n\n    let style = `scale(${scaleX},${scaleY})`\n\n    return forElements(elements, element => {\n        if (!element.style) return\n\n        if (keep) {\n            element.style[`${prefix}transform`] += ` ${style}`\n            element.style.transform             += ` ${style}`\n        }\n        else {\n            element.style[`${prefix}transform`] = style\n            element.style.transform             = style\n        }\n    })\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "transformation",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The transformation object",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 26,
                      "offset": 25
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 26,
                  "offset": 25
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 26,
              "offset": 25
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      },
      {
        "name": "scale",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scale option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 13,
                      "offset": 12
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 13,
                  "offset": 12
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 13,
              "offset": 12
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scale"
        }
      },
      {
        "name": "x",
        "lineNumber": 5,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scaleX option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scale.x"
        }
      },
      {
        "name": "y",
        "lineNumber": 6,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scaleY option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scale.y"
        }
      },
      {
        "name": "scaleX",
        "lineNumber": 7,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scaleX option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scaleX"
        }
      },
      {
        "name": "scaleY",
        "lineNumber": 8,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scaleY option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scaleY"
        }
      },
      {
        "name": "keep",
        "lineNumber": 9,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Preserve previous transformation",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 33,
                      "offset": 32
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 33,
                  "offset": 32
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 33,
              "offset": 32
            }
          }
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "bool"
          }
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "elements for chaining",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 22,
                      "offset": 21
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 22,
                  "offset": 21
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 22,
              "offset": 21
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "name": "scale2D",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "scale2D"
      }
    ],
    "namespace": "scale2D"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Apply the provided 3D scale transformation on each element of elements",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 71,
                  "offset": 70
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 71,
              "offset": 70
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 71,
          "offset": 70
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "The transformation object",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "transformation"
      },
      {
        "title": "param",
        "description": "scale option",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "object.scale"
        },
        "name": "scale"
      },
      {
        "title": "param",
        "description": "scaleX option",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "object.scale.x"
        },
        "name": "x"
      },
      {
        "title": "param",
        "description": "scaleY option",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "object.scale.y"
        },
        "name": "y"
      },
      {
        "title": "param",
        "description": "scaleZ option",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "object.scale.z"
        },
        "name": "z"
      },
      {
        "title": "param",
        "description": "scaleX option",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "object.scaleX"
        },
        "name": "scaleX"
      },
      {
        "title": "param",
        "description": "scaleY option",
        "lineNumber": 9,
        "type": {
          "type": "NameExpression",
          "name": "object.scaleY"
        },
        "name": "scaleY"
      },
      {
        "title": "param",
        "description": "scaleZ option",
        "lineNumber": 10,
        "type": {
          "type": "NameExpression",
          "name": "object.scaleZ"
        },
        "name": "scaleZ"
      },
      {
        "title": "param",
        "description": "Preserve previous transformation",
        "lineNumber": 11,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "bool"
          }
        },
        "name": "keep"
      },
      {
        "title": "return",
        "description": "elements for chaining",
        "lineNumber": 12,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 17,
        "column": 2
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 18,
          "column": 0
        },
        "end": {
          "line": 57,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/styles/scale3D.js",
      "code": "import forElements from '../core/forElements'\nimport prefix      from '../browser/prefix'\n\n/**\n* Apply the provided 3D scale transformation on each element of elements\n* @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n* @param {object} transformation - The transformation object\n* @param {object.scale} scale - scale option\n* @param {object.scale.x} x - scaleX option\n* @param {object.scale.y} y - scaleY option\n* @param {object.scale.z} z - scaleZ option\n* @param {object.scaleX} scaleX - scaleX option\n* @param {object.scaleY} scaleY - scaleY option\n* @param {object.scaleZ} scaleZ - scaleZ option\n* @param {bool} [keep] - Preserve previous transformation\n* @return {string | Array | NodeList | HTMLCollection} elements for chaining\n*/\nexport default function scale3D (elements, transformation, keep) {\n    const scaleX = 'scaleX' in transformation ?\n                    transformation.scaleX :\n                    ('scale' in transformation ?\n                        ('x' in transformation.scale ?\n                            transformation.scale.x :\n                            transformation.scale)\n                                : 1)\n\n    const scaleY = 'scaleY' in transformation ?\n                    transformation.scaleY :\n                    ('scale' in transformation ?\n                        ('y' in transformation.scale ?\n                            transformation.scale.y :\n                            transformation.scale)\n                                : 1)\n\n    const scaleZ = 'scaleZ' in transformation ?\n                    transformation.scaleZ :\n                    ('scale' in transformation ?\n                        ('z' in transformation.scale ?\n                            transformation.scale.z :\n                            1)\n                                : 1)\n\n    let style = `scale3D(${scaleX},${scaleY},${scaleZ})`\n\n    return forElements(elements, element => {\n        if (!element.style) return\n\n        if (keep) {\n            element.style[`${prefix}transform`] += ` ${style}`\n            element.style.transform             += ` ${style}`\n        }\n        else {\n            element.style[`${prefix}transform`] = style\n            element.style.transform             = style\n        }\n    })\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "transformation",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The transformation object",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 26,
                      "offset": 25
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 26,
                  "offset": 25
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 26,
              "offset": 25
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      },
      {
        "name": "scale",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scale option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 13,
                      "offset": 12
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 13,
                  "offset": 12
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 13,
              "offset": 12
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scale"
        }
      },
      {
        "name": "x",
        "lineNumber": 5,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scaleX option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scale.x"
        }
      },
      {
        "name": "y",
        "lineNumber": 6,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scaleY option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scale.y"
        }
      },
      {
        "name": "z",
        "lineNumber": 7,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scaleZ option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scale.z"
        }
      },
      {
        "name": "scaleX",
        "lineNumber": 8,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scaleX option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scaleX"
        }
      },
      {
        "name": "scaleY",
        "lineNumber": 9,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scaleY option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scaleY"
        }
      },
      {
        "name": "scaleZ",
        "lineNumber": 10,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "scaleZ option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 14,
                      "offset": 13
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 14,
                  "offset": 13
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 14,
              "offset": 13
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.scaleZ"
        }
      },
      {
        "name": "keep",
        "lineNumber": 11,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Preserve previous transformation",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 33,
                      "offset": 32
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 33,
                  "offset": 32
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 33,
              "offset": 32
            }
          }
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "bool"
          }
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "elements for chaining",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 22,
                      "offset": 21
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 22,
                  "offset": 21
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 22,
              "offset": 21
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "name": "scale3D",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "scale3D"
      }
    ],
    "namespace": "scale3D"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Return the screen relative position of an element",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 50,
                  "offset": 49
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 50,
              "offset": 49
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 50,
          "offset": 49
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The selector or dom element",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        },
        "name": "element"
      },
      {
        "title": "return",
        "description": "screenPosition",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 7,
        "column": 2
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 8,
          "column": 0
        },
        "end": {
          "line": 12,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/styles/screenPosition.js",
      "code": "import getElement from '../core/getElement'\n\n/**\n* Return the screen relative position of an element\n* @param {string | window | document | HTMLElement | SVGElement} element - The selector or dom element\n* @return {object} screenPosition\n*/\nexport default function screenPosition (element) {\n    element = getElement(element)\n\n    return !!element && element.getBoundingClientRect()\n}\n"
    },
    "params": [
      {
        "name": "element",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The selector or dom element",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 28,
                      "offset": 27
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 28,
                  "offset": 27
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 28,
              "offset": 27
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "HTMLElement"
            },
            {
              "type": "NameExpression",
              "name": "window"
            },
            {
              "type": "NameExpression",
              "name": "document"
            },
            {
              "type": "NameExpression",
              "name": "SVGElement"
            }
          ]
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "screenPosition",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 15,
                      "offset": 14
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 15,
                  "offset": 14
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 15,
              "offset": 14
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      }
    ],
    "name": "screenPosition",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "screenPosition"
      }
    ],
    "namespace": "screenPosition"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Set the provided height to elements",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 36,
                  "offset": 35
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 36,
              "offset": 35
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 36,
          "offset": 35
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "The height",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "height"
      },
      {
        "title": "return",
        "description": "elements - The iterable for chaining",
        "lineNumber": 4,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 8,
        "column": 2
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 17,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/styles/setHeight.js",
      "code": "import forElements from '../core/forElements'\n\n/**\n* Set the provided height to elements\n* @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n* @param {number} height - The height\n* @return {string | Array | NodeList | HTMLCollection} elements - The iterable for chaining\n*/\nexport default function setHeight (elements, height) {\n    if (typeof height == 'number') height += 'px'\n\n    return forElements(elements, element => {\n        if (!element.style) return\n\n        element.style.height = height\n    })\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "height",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The height",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 11,
                      "offset": 10
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 11,
                  "offset": 10
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 11,
              "offset": 10
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "number"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "elements - The iterable for chaining",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 37,
                      "offset": 36
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 37,
                  "offset": 36
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 37,
              "offset": 36
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "name": "setHeight",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "setHeight"
      }
    ],
    "namespace": "setHeight"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Set the provided size to elements",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 34,
                  "offset": 33
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 34,
              "offset": 33
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 34,
          "offset": 33
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "The size as an object with width and height",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "size"
      },
      {
        "title": "return",
        "description": "elements - The iterable for chaining",
        "lineNumber": 4,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 8,
        "column": 2
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 18,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/styles/setSize.js",
      "code": "import forElements from '../core/forElements'\n\n/**\n* Set the provided size to elements\n* @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n* @param {object} size - The size as an object with width and height\n* @return {string | Array | NodeList | HTMLCollection} elements - The iterable for chaining\n*/\nexport default function setSize (elements, size) {\n    if (typeof size.width == 'number') size.width += 'px'\n    if (typeof size.height == 'number') size.height += 'px'\n\n    return forElements(elements, element => {\n        if (!element.style) return\n\n        Object.assign(element.style, size)\n    })\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "size",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The size as an object with width and height",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 44,
                      "offset": 43
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 44,
                  "offset": 43
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 44,
              "offset": 43
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "elements - The iterable for chaining",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 37,
                      "offset": 36
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 37,
                  "offset": 36
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 37,
              "offset": 36
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "name": "setSize",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "setSize"
      }
    ],
    "namespace": "setSize"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Set the provided style to elements",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 35,
                  "offset": 34
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 35,
              "offset": 34
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 35,
          "offset": 34
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "The style options as object linking value to property",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "style"
      },
      {
        "title": "return",
        "description": "elements - The iterable for chaining",
        "lineNumber": 4,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 17,
        "column": 0
      },
      "end": {
        "line": 22,
        "column": 2
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 23,
          "column": 0
        },
        "end": {
          "line": 43,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/styles/setStyle.js",
      "code": "import forElements from '../core/forElements'\n\nconst unitLessAttributes = [\n    'zindex',\n    'zoom',\n    'fontweight',\n    'lineheight',\n    'counterreset',\n    'counterincrement',\n    'volume',\n    'stress',\n    'pitchRange',\n    'richness',\n    'opacity'\n]\n\n/**\n* Set the provided style to elements\n* @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n* @param {object} style - The style options as object linking value to property\n* @return {string | Array | NodeList | HTMLCollection} elements - The iterable for chaining\n*/\nexport default function setStyle (elements, style) {\n    let properties = Object.keys(style)\n\n    let i = properties.length\n    while(i--) {\n        let property = properties[i]\n\n        if (unitLessAttributes.indexOf(property.replace(/-/g, ' ').toLowerCase()) == -1) {\n            let value = style[property]\n\n            if (typeof value == 'number')\n                style[property] += 'px'\n        }\n    }\n\n    return forElements(elements, element => {\n        if (!element.style) return\n\n        Object.assign(element.style, style)\n    })\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "style",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The style options as object linking value to property",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 54,
                      "offset": 53
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 54,
                  "offset": 53
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 54,
              "offset": 53
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "elements - The iterable for chaining",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 37,
                      "offset": 36
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 37,
                  "offset": 36
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 37,
              "offset": 36
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "name": "setStyle",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "setStyle"
      }
    ],
    "namespace": "setStyle"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Set the provided width to elements",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 35,
                  "offset": 34
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 35,
              "offset": 34
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 35,
          "offset": 34
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "The width",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "width"
      },
      {
        "title": "return",
        "description": "elements - The iterable for chaining",
        "lineNumber": 4,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 8,
        "column": 2
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 17,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/styles/setWidth.js",
      "code": "import forElements from '../core/forElements'\n\n/**\n* Set the provided width to elements\n* @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n* @param {number} width - The width\n* @return {string | Array | NodeList | HTMLCollection} elements - The iterable for chaining\n*/\nexport default function setWidth (elements, width) {\n    if (typeof width == 'number') width += 'px'\n\n    return forElements(elements, element => {\n        if (!element.style) return\n\n        element.style.width = width\n    })\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "width",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The width",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 10,
                      "offset": 9
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 10,
                  "offset": 9
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 10,
              "offset": 9
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "number"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "elements - The iterable for chaining",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 37,
                      "offset": 36
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 37,
                  "offset": 36
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 37,
              "offset": 36
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "name": "setWidth",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "setWidth"
      }
    ],
    "namespace": "setWidth"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Reset visibility style attribute for elements",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 46,
                  "offset": 45
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 46,
              "offset": 45
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 46,
          "offset": 45
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "return",
        "description": "elements - The iterable for chaining",
        "lineNumber": 3,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 7,
        "column": 2
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 8,
          "column": 0
        },
        "end": {
          "line": 14,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/styles/show.js",
      "code": "import forElements from '../core/forElements'\n\n/**\n* Reset visibility style attribute for elements\n* @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n* @return {string | Array | NodeList | HTMLCollection} elements - The iterable for chaining\n*/\nexport default function show (elements) {\n    return forElements(elements, element => {\n        if (!element.style) return\n\n        element.style.visibility = ''\n    })\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "elements - The iterable for chaining",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 37,
                      "offset": 36
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 37,
                  "offset": 36
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 37,
              "offset": 36
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "name": "show",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "show"
      }
    ],
    "namespace": "show"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Get size in pixels of element or first element of elements if size is undefined,\nelse set size to all element of elements.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 2,
                  "column": 42,
                  "offset": 122
                },
                "indent": [
                  1
                ]
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 2,
              "column": 42,
              "offset": 122
            },
            "indent": [
              1
            ]
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 2,
          "column": 42,
          "offset": 122
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector.",
        "lineNumber": 3,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "The size as an object with width and height.",
        "lineNumber": 4,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "object"
          }
        },
        "name": "size"
      },
      {
        "title": "param",
        "description": "Width of the element.",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "object.width"
        },
        "name": "width"
      },
      {
        "title": "param",
        "description": "Height of the element.",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "object.height"
        },
        "name": "height"
      },
      {
        "title": "return",
        "description": "size | elements - The size as an object with width and height in pixels | elements for chaining.",
        "lineNumber": 7,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "object"
            },
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "title": "return",
        "description": "size.width - Width of the element.",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "number"
        }
      },
      {
        "title": "return",
        "description": "size.height - Height of the element.",
        "lineNumber": 9,
        "type": {
          "type": "NameExpression",
          "name": "number"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 14,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 15,
          "column": 0
        },
        "end": {
          "line": 20,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/styles/size.js",
      "code": "import setSize from './setSize'\nimport getSize from './getSize'\n\n/**\n * Get size in pixels of element or first element of elements if size is undefined,\n * else set size to all element of elements.\n * @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector.\n * @param {object} [size] - The size as an object with width and height.\n * @param {object.width} width - Width of the element.\n * @param {object.height} height - Height of the element.\n * @return {object | string | Array | NodeList | HTMLCollection} size | elements - The size as an object with width and height in pixels | elements for chaining.\n * @return {number} size.width - Width of the element.\n * @return {number} size.height - Height of the element.\n */\nexport default function size (elements, size) {\n    if (typeof size != 'object')\n        return getSize(elements)\n    else\n        return setSize(elements, size)\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 26,
                      "offset": 25
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 26,
                  "offset": 25
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 26,
              "offset": 25
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "size",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The size as an object with width and height.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 45,
                      "offset": 44
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 45,
                  "offset": 44
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 45,
              "offset": 44
            }
          }
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "object"
          }
        }
      },
      {
        "name": "width",
        "lineNumber": 5,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Width of the element.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 22,
                      "offset": 21
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 22,
                  "offset": 21
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 22,
              "offset": 21
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.width"
        }
      },
      {
        "name": "height",
        "lineNumber": 6,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Height of the element.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 23,
                      "offset": 22
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 23,
                  "offset": 22
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 23,
              "offset": 22
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.height"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "size | elements - The size as an object with width and height in pixels | elements for chaining.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 97,
                      "offset": 96
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 97,
                  "offset": 96
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 97,
              "offset": 96
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "object"
            },
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "size.width - Width of the element.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 35,
                      "offset": 34
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 35,
                  "offset": 34
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 35,
              "offset": 34
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "number"
        }
      },
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "size.height - Height of the element.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 37,
                      "offset": 36
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 37,
                  "offset": 36
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 37,
              "offset": 36
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "number"
        }
      }
    ],
    "name": "size",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "size"
      }
    ],
    "namespace": "size"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Get style value for option property of element or first element of elements if option is a string,\nset style values for properties to all element of elements if option is an object.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 2,
                  "column": 83,
                  "offset": 181
                },
                "indent": [
                  1
                ]
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 2,
              "column": 83,
              "offset": 181
            },
            "indent": [
              1
            ]
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 2,
          "column": 83,
          "offset": 181
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 3,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "The css property name or an object | property-value pairs",
        "lineNumber": 4,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "object"
            }
          ]
        },
        "name": "option"
      },
      {
        "title": "return",
        "description": "value | elements - The css value for the property | elements for chaining",
        "lineNumber": 5,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "object"
            },
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 10,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 11,
          "column": 0
        },
        "end": {
          "line": 18,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/styles/style.js",
      "code": "import setStyle from './setStyle'\nimport getStyle from './getStyle'\n\n/**\n * Get style value for option property of element or first element of elements if option is a string,\n * set style values for properties to all element of elements if option is an object.\n * @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n * @param {string | object} option - The css property name or an object | property-value pairs\n * @return {object | string | Array | NodeList | HTMLCollection} value | elements - The css value for the property | elements for chaining\n */\nexport default function style (elements, option) {\n  if (typeof option == 'object') {\n    return setStyle(elements, option)\n  }\n  else if (typeof option == 'string') {\n    return getStyle(elements, option)\n  }\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "option",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The css property name or an object | property-value pairs",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 58,
                      "offset": 57
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 58,
                  "offset": 57
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 58,
              "offset": 57
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "object"
            }
          ]
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "value | elements - The css value for the property | elements for chaining",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 74,
                      "offset": 73
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 74,
                  "offset": 73
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 74,
              "offset": 73
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "object"
            },
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "name": "style",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "style"
      }
    ],
    "namespace": "style"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Set the provided transformation to all elements using a matrix if needed and 3D if supported.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 94,
                  "offset": 93
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 94,
              "offset": 93
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 94,
          "offset": 93
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "The transformation as an object",
        "lineNumber": 3,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "object"
          }
        },
        "name": "transformation"
      },
      {
        "title": "return",
        "description": "elements - The iterable for chaining",
        "lineNumber": 4,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 5,
        "column": 0
      },
      "end": {
        "line": 10,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 11,
          "column": 1
        },
        "end": {
          "line": 27,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/styles/transform.js",
      "code": "import matrix from './matrix'\nimport scale from './scale'\nimport translate from './translate'\n\n/**\n * Set the provided transformation to all elements using a matrix if needed and 3D if supported.\n * @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n * @param {object} [transformation] - The transformation as an object\n * @return {string | Array | NodeList | HTMLCollection} elements - The iterable for chaining\n */\n export default function transform (elements, transformation) {\n    // if skew or rotation use matrix\n    if ('skew' in transformation || 'skewX' in transformation || 'skewY' in transformation ||\n        'rotate' in transformation || 'rotateX' in transformation || 'rotateY' in transformation || 'rotateZ' in transformation)\n        {\n            return matrix(elements, transformation)\n    }\n    else {\n         let shouldKeep = false // don't crush translate property\n\n         if (shouldKeep = ('x' in transformation || 'y' in transformation || 'z' in transformation))\n            return translate(elements, transformation)\n\n         if ('scale' in transformation || 'scaleX' in transformation || 'scaleY' in transformation || 'scaleZ' in transformation)\n            return scale(elements, transformation, shouldKeep)\n    }\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "transformation",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The transformation as an object",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 32,
                      "offset": 31
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 32,
                  "offset": 31
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 32,
              "offset": 31
            }
          }
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "object"
          }
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "elements - The iterable for chaining",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 37,
                      "offset": 36
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 37,
                  "offset": 36
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 37,
              "offset": 36
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "name": "transform",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "transform"
      }
    ],
    "namespace": "transform"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Apply the provided translate transformation (3D if supported) on each element of elements",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 90,
                  "offset": 89
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 90,
              "offset": 89
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 90,
          "offset": 89
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "The transformation object",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "transformation"
      },
      {
        "title": "param",
        "description": "translateX option",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "object.x"
        },
        "name": "x"
      },
      {
        "title": "param",
        "description": "translateY option",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "object.y"
        },
        "name": "y"
      },
      {
        "title": "param",
        "description": "translateZ option",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "object.z"
        },
        "name": "z"
      },
      {
        "title": "param",
        "description": "Preserve previous transformation",
        "lineNumber": 7,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "bool"
          }
        },
        "name": "keep"
      },
      {
        "title": "return",
        "description": "elements for chaining",
        "lineNumber": 8,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 6,
        "column": 0
      },
      "end": {
        "line": 15,
        "column": 2
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 16,
          "column": 0
        },
        "end": {
          "line": 18,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/styles/translate.js",
      "code": "import support3D from '../browser/support3D'\n\nimport translate2D from './translate2D'\nimport translate3D from './translate3D'\n\n/**\n* Apply the provided translate transformation (3D if supported) on each element of elements\n* @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n* @param {object} transformation - The transformation object\n* @param {object.x} x - translateX option\n* @param {object.y} y - translateY option\n* @param {object.z} z - translateZ option\n* @param {bool} [keep] - Preserve previous transformation\n* @return {string | Array | NodeList | HTMLCollection} elements for chaining\n*/\nexport default function translate (elements, transformation, keep) {\n    return support3D ? translate3D(elements, transformation, keep) : translate2D(elements, transformation, keep)\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "transformation",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The transformation object",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 26,
                      "offset": 25
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 26,
                  "offset": 25
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 26,
              "offset": 25
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      },
      {
        "name": "x",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "translateX option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 18,
                      "offset": 17
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 18,
                  "offset": 17
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 18,
              "offset": 17
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.x"
        }
      },
      {
        "name": "y",
        "lineNumber": 5,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "translateY option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 18,
                      "offset": 17
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 18,
                  "offset": 17
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 18,
              "offset": 17
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.y"
        }
      },
      {
        "name": "z",
        "lineNumber": 6,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "translateZ option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 18,
                      "offset": 17
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 18,
                  "offset": 17
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 18,
              "offset": 17
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.z"
        }
      },
      {
        "name": "keep",
        "lineNumber": 7,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Preserve previous transformation",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 33,
                      "offset": 32
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 33,
                  "offset": 32
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 33,
              "offset": 32
            }
          }
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "bool"
          }
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "elements for chaining",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 22,
                      "offset": 21
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 22,
                  "offset": 21
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 22,
              "offset": 21
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "name": "translate",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "translate"
      }
    ],
    "namespace": "translate"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Apply the provided translate transformation on each element of elements",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 72,
                  "offset": 71
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 72,
              "offset": 71
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 72,
          "offset": 71
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "The transformation object",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "transformation"
      },
      {
        "title": "param",
        "description": "translateX option",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "object.x"
        },
        "name": "x"
      },
      {
        "title": "param",
        "description": "translateY option",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "object.y"
        },
        "name": "y"
      },
      {
        "title": "param",
        "description": "Preserve previous transformation",
        "lineNumber": 6,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "bool"
          }
        },
        "name": "keep"
      },
      {
        "title": "return",
        "description": "elements for chaining",
        "lineNumber": 7,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 12,
        "column": 2
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 13,
          "column": 0
        },
        "end": {
          "line": 34,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/styles/translate2D.js",
      "code": "import forElements from '../core/forElements'\nimport prefix      from '../browser/prefix'\n\n/**\n* Apply the provided translate transformation on each element of elements\n* @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n* @param {object} transformation - The transformation object\n* @param {object.x} x - translateX option\n* @param {object.y} y - translateY option\n* @param {bool} [keep] - Preserve previous transformation\n* @return {string | Array | NodeList | HTMLCollection} elements for chaining\n*/\nexport default function translate2D (elements, transformation, keep) {\n    let x = 'x' in transformation ? transformation.x : 0,\n        y = 'y' in transformation ? transformation.y : 0\n\n    if (typeof x == 'number') x += 'px'\n    if (typeof y == 'number') y += 'px'\n\n    let style = `translate(${x},${y})`\n\n    return forElements(elements, element => {\n        if (!element.style) return\n\n        if (keep) {\n            element.style[`${prefix}transform`] += ` ${style}`\n            element.style.transform             += ` ${style}`\n        }\n        else {\n            element.style[`${prefix}transform`] = style\n            element.style.transform             = style\n        }\n    })\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "transformation",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The transformation object",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 26,
                      "offset": 25
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 26,
                  "offset": 25
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 26,
              "offset": 25
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      },
      {
        "name": "x",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "translateX option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 18,
                      "offset": 17
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 18,
                  "offset": 17
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 18,
              "offset": 17
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.x"
        }
      },
      {
        "name": "y",
        "lineNumber": 5,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "translateY option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 18,
                      "offset": 17
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 18,
                  "offset": 17
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 18,
              "offset": 17
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.y"
        }
      },
      {
        "name": "keep",
        "lineNumber": 6,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Preserve previous transformation",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 33,
                      "offset": 32
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 33,
                  "offset": 32
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 33,
              "offset": 32
            }
          }
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "bool"
          }
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "elements for chaining",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 22,
                      "offset": 21
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 22,
                  "offset": 21
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 22,
              "offset": 21
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "name": "translate2D",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "translate2D"
      }
    ],
    "namespace": "translate2D"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Apply the provided 3D translate transformation on each element of elements",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 75,
                  "offset": 74
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 75,
              "offset": 74
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 75,
          "offset": 74
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 2,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "The transformation object",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "transformation"
      },
      {
        "title": "param",
        "description": "translateX option",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "object.x"
        },
        "name": "x"
      },
      {
        "title": "param",
        "description": "translateY option",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "object.y"
        },
        "name": "y"
      },
      {
        "title": "param",
        "description": "translateZ option",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "object.z"
        },
        "name": "z"
      },
      {
        "title": "param",
        "description": "Preserve previous transformation",
        "lineNumber": 7,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "bool"
          }
        },
        "name": "keep"
      },
      {
        "title": "return",
        "description": "elements for chaining",
        "lineNumber": 8,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 13,
        "column": 2
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 14,
          "column": 0
        },
        "end": {
          "line": 37,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/styles/translate3D.js",
      "code": "import forElements from '../core/forElements'\nimport prefix      from '../browser/prefix'\n\n/**\n* Apply the provided 3D translate transformation on each element of elements\n* @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n* @param {object} transformation - The transformation object\n* @param {object.x} x - translateX option\n* @param {object.y} y - translateY option\n* @param {object.z} z - translateZ option\n* @param {bool} [keep] - Preserve previous transformation\n* @return {string | Array | NodeList | HTMLCollection} elements for chaining\n*/\nexport default function translate3D (elements, transformation, keep) {\n    let x = 'x' in transformation ? transformation.x : 0,\n        y = 'y' in transformation ? transformation.y : 0,\n        z = 'z' in transformation ? transformation.z : 0\n\n    if (typeof x == 'number') x += 'px'\n    if (typeof y == 'number') y += 'px'\n    if (typeof z == 'number') z += 'px'\n\n    let style = `translate3D(${x},${y},${z})`\n\n    return forElements(elements, element => {\n        if (!element.style) return\n\n        if (keep) {\n            element.style[`${prefix}transform`] += ` ${style}`\n            element.style.transform             += ` ${style}`\n        }\n        else {\n            element.style[`${prefix}transform`] = style\n            element.style.transform             = style\n        }\n    })\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "transformation",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The transformation object",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 26,
                      "offset": 25
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 26,
                  "offset": 25
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 26,
              "offset": 25
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      },
      {
        "name": "x",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "translateX option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 18,
                      "offset": 17
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 18,
                  "offset": 17
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 18,
              "offset": 17
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.x"
        }
      },
      {
        "name": "y",
        "lineNumber": 5,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "translateY option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 18,
                      "offset": 17
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 18,
                  "offset": 17
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 18,
              "offset": 17
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.y"
        }
      },
      {
        "name": "z",
        "lineNumber": 6,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "translateZ option",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 18,
                      "offset": 17
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 18,
                  "offset": 17
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 18,
              "offset": 17
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object.z"
        }
      },
      {
        "name": "keep",
        "lineNumber": 7,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Preserve previous transformation",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 33,
                      "offset": 32
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 33,
                  "offset": 32
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 33,
              "offset": 32
            }
          }
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "bool"
          }
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "elements for chaining",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 22,
                      "offset": 21
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 22,
                  "offset": 21
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 22,
              "offset": 21
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "name": "translate3D",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "translate3D"
      }
    ],
    "namespace": "translate3D"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Get width in pixels of element or first element of elements if width is undefined,\nelse set width to all element of elements.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 2,
                  "column": 43,
                  "offset": 125
                },
                "indent": [
                  1
                ]
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 2,
              "column": 43,
              "offset": 125
            },
            "indent": [
              1
            ]
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 2,
          "column": 43,
          "offset": 125
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The iterable or selector",
        "lineNumber": 3,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        },
        "name": "elements"
      },
      {
        "title": "param",
        "description": "The width",
        "lineNumber": 4,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "number"
          }
        },
        "name": "width"
      },
      {
        "title": "return",
        "description": "width | elements - The width in pixels | elements for chaining",
        "lineNumber": 5,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "number"
            },
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0
      },
      "end": {
        "line": 10,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 11,
          "column": 0
        },
        "end": {
          "line": 15,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/styles/width.js",
      "code": "import setWidth from './setWidth'\nimport getWidth from './getWidth'\n\n/**\n * Get width in pixels of element or first element of elements if width is undefined,\n * else set width to all element of elements.\n * @param {string | Array | NodeList | HTMLCollection} elements - The iterable or selector\n * @param {number} [width] - The width\n * @return {number | string | Array | NodeList | HTMLCollection} width | elements - The width in pixels | elements for chaining\n */\nexport default function width (elements, width) {\n    return typeof width != 'undefined'\n         ? setWidth(elements, width)\n         : getWidth(elements)\n}\n"
    },
    "params": [
      {
        "name": "elements",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The iterable or selector",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 25,
                      "offset": 24
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 25,
                  "offset": 24
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 25,
              "offset": 24
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      },
      {
        "name": "width",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The width",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 10,
                      "offset": 9
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 10,
                  "offset": 9
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 10,
              "offset": 9
            }
          }
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "number"
          }
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "width | elements - The width in pixels | elements for chaining",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 63,
                      "offset": 62
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 63,
                  "offset": 62
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 63,
              "offset": 62
            }
          }
        },
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "number"
            },
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "Array"
            },
            {
              "type": "NameExpression",
              "name": "NodeList"
            },
            {
              "type": "NameExpression",
              "name": "HTMLCollection"
            }
          ]
        }
      }
    ],
    "name": "width",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "width"
      }
    ],
    "namespace": "width"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Execute callback once for all fired during a waiting time.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 59,
                  "offset": 58
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 59,
              "offset": 58
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 59,
          "offset": 58
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The callback function",
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "function"
        },
        "name": "callback"
      },
      {
        "title": "param",
        "description": "The waiting time in milliseconds",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "wait"
      },
      {
        "title": "param",
        "description": "Execute callback on first trigger",
        "lineNumber": 4,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "bool"
          }
        },
        "name": "immediate",
        "default": "false"
      },
      {
        "title": "return",
        "description": "debounced - The debounced callback with cancel method",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "function"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 7,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 8,
          "column": 0
        },
        "end": {
          "line": 34,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/utils/debounce.js",
      "code": "/**\n * Execute callback once for all fired during a waiting time.\n * @param {function} callback - The callback function\n * @param {number} wait - The waiting time in milliseconds\n * @param {bool} [immediate=false] - Execute callback on first trigger\n * @return {function} debounced - The debounced callback with cancel method\n */\nexport default function debounce (callback, wait, immediate = false) {\n    let canCall = immediate, timeout\n\n    const applyCallback = function() {\n        canCall = false\n        callback.call(this, ...arguments)\n\n        timeout = setTimeout(function () {canCall = immediate}, wait)\n    }\n\n    const debounced = function() {\n        clearTimeout(timeout)\n\n        if (canCall)\n            applyCallback.call(this, ...arguments)\n        else\n            timeout = setTimeout(applyCallback.bind(this, arguments), wait)\n\n        debounced.cancel = function () {\n            clearTimeout(timeout)\n            canCall = true\n            timeout = null\n        }\n    }\n\n    return debounced\n}\n"
    },
    "params": [
      {
        "name": "callback",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The callback function",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 22,
                      "offset": 21
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 22,
                  "offset": 21
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 22,
              "offset": 21
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "function"
        }
      },
      {
        "name": "wait",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The waiting time in milliseconds",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 33,
                      "offset": 32
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 33,
                  "offset": 32
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 33,
              "offset": 32
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "number"
        }
      },
      {
        "name": "immediate",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Execute callback on first trigger",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 34,
                      "offset": 33
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 34,
                  "offset": 33
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 34,
              "offset": 33
            }
          }
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "bool"
          }
        },
        "default": "false"
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "debounced - The debounced callback with cancel method",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 54,
                      "offset": 53
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 54,
                  "offset": 53
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 54,
              "offset": 53
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "function"
        }
      }
    ],
    "name": "debounce",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "debounce"
      }
    ],
    "namespace": "debounce"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Return a deep clone of object.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 31,
                  "offset": 30
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 31,
              "offset": 30
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 31,
          "offset": 30
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The object to clone",
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "object"
      },
      {
        "title": "return",
        "description": "clone - The clone of the object",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 5,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 6,
          "column": 0
        },
        "end": {
          "line": 16,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/utils/deepClone.js",
      "code": "/**\n * Return a deep clone of object.\n * @param {object} object - The object to clone\n * @return {object} clone - The clone of the object\n */\nexport default function deepClone (object) {\n    if (object == null || typeof object !== 'object')\n        return object\n\n    let clone = object.constructor()\n    for (let attr in object)\n        if (object.hasOwnProperty(attr))\n            clone[attr] = object[attr]\n\n    return clone\n}\n"
    },
    "params": [
      {
        "name": "object",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The object to clone",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 20,
                      "offset": 19
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 20,
                  "offset": 19
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 20,
              "offset": 19
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "clone - The clone of the object",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 32,
                      "offset": 31
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 32,
                  "offset": 31
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 32,
              "offset": 31
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      }
    ],
    "name": "deepClone",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "deepClone"
      }
    ],
    "namespace": "deepClone"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Copy all defaults properties to options.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 41,
                  "offset": 40
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 41,
              "offset": 40
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 41,
          "offset": 40
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The received options",
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "options"
      },
      {
        "title": "param",
        "description": "The default values",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "defaults"
      },
      {
        "title": "return",
        "description": "merge - The merged options",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 6,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 7,
          "column": 0
        },
        "end": {
          "line": 9,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/utils/defaultify.js",
      "code": "/**\n * Copy all defaults properties to options.\n * @param {object} options - The received options\n * @param {object} defaults - The default values\n * @return {object} merge - The merged options\n */\nexport default function defaultify (options, defaults) {\n    return Object.assign(options, defaults)\n}\n"
    },
    "params": [
      {
        "name": "options",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The received options",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 21,
                      "offset": 20
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 21,
                  "offset": 20
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 21,
              "offset": 20
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      },
      {
        "name": "defaults",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The default values",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 19,
                      "offset": 18
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 19,
                  "offset": 18
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 19,
              "offset": 18
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "merge - The merged options",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 27,
                      "offset": 26
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 27,
                  "offset": 26
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 27,
              "offset": 26
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      }
    ],
    "name": "defaultify",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "defaultify"
      }
    ],
    "namespace": "defaultify"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Cache callbacks result for arguments and return cached results when called with the same ones",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 94,
                  "offset": 93
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 94,
              "offset": 93
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 94,
          "offset": 93
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The function to call",
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "function"
        },
        "name": "callback"
      },
      {
        "title": "return",
        "description": "memoized - The memoized callback",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "function"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 5,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 6,
          "column": 0
        },
        "end": {
          "line": 14,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/utils/memoize.js",
      "code": "/**\n * Cache callbacks result for arguments and return cached results when called with the same ones\n * @param {function} callback - The function to call\n * @return {function} memoized - The memoized callback\n */\nexport default function memoize (callback) {\n    let cache = {}\n\n    return function () {\n        let args = JSON.stringify(arguments)\n\n        return args in cache ? cache[args] : cache[args] = callback.call(this, ...arguments)\n    }\n}\n"
    },
    "params": [
      {
        "name": "callback",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The function to call",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 21,
                      "offset": 20
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 21,
                  "offset": 20
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 21,
              "offset": 20
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "function"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "memoized - The memoized callback",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 33,
                      "offset": 32
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 33,
                  "offset": 32
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 33,
              "offset": 32
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "function"
        }
      }
    ],
    "name": "memoize",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "memoize"
      }
    ],
    "namespace": "memoize"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Return a random number between two values",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 42,
                  "offset": 41
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 42,
              "offset": 41
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 42,
          "offset": 41
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The maximum value",
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "max"
      },
      {
        "title": "param",
        "description": "The minimum value",
        "lineNumber": 3,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "number"
          }
        },
        "name": "min",
        "default": "0"
      },
      {
        "title": "return",
        "description": "value - A random value between min and max",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "function"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 6,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 7,
          "column": 0
        },
        "end": {
          "line": 9,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/utils/randomBetween.js",
      "code": "/**\n * Return a random number between two values\n * @param {number} max - The maximum value\n * @param {number} [min=0] - The minimum value\n * @return {function} value - A random value between min and max\n */\nexport default function randomBetween (max, min = 0) {\n    return Math.random() * (max - min + 1) + min\n}\n"
    },
    "params": [
      {
        "name": "max",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The maximum value",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 18,
                      "offset": 17
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 18,
                  "offset": 17
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 18,
              "offset": 17
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "number"
        }
      },
      {
        "name": "min",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The minimum value",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 18,
                      "offset": 17
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 18,
                  "offset": 17
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 18,
              "offset": 17
            }
          }
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "number"
          }
        },
        "default": "0"
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "value - A random value between min and max",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 43,
                      "offset": 42
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 43,
                  "offset": 42
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 43,
              "offset": 42
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "function"
        }
      }
    ],
    "name": "randomBetween",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "randomBetween"
      }
    ],
    "namespace": "randomBetween"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Return a random integer between two integers",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 45,
                  "offset": 44
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 45,
              "offset": 44
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 45,
          "offset": 44
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The maximum integer",
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "max"
      },
      {
        "title": "param",
        "description": "The minimum integer",
        "lineNumber": 3,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "number"
          }
        },
        "name": "min",
        "default": "0"
      },
      {
        "title": "return",
        "description": "value - A random interger between min and max",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "function"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 6,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 7,
          "column": 0
        },
        "end": {
          "line": 9,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/utils/randomIntBetween.js",
      "code": "/**\n * Return a random integer between two integers\n * @param {number} max - The maximum integer\n * @param {number} [min=0] - The minimum integer\n * @return {function} value - A random interger between min and max\n */\nexport default function randomIntBetween (max, min = 0) {\n    return ~~(Math.random() * (max - min + 1)) + min\n}\n"
    },
    "params": [
      {
        "name": "max",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The maximum integer",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 20,
                      "offset": 19
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 20,
                  "offset": 19
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 20,
              "offset": 19
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "number"
        }
      },
      {
        "name": "min",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The minimum integer",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 20,
                      "offset": 19
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 20,
                  "offset": 19
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 20,
              "offset": 19
            }
          }
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "number"
          }
        },
        "default": "0"
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "value - A random interger between min and max",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 46,
                      "offset": 45
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 46,
                  "offset": 45
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 46,
              "offset": 45
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "function"
        }
      }
    ],
    "name": "randomIntBetween",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "randomIntBetween"
      }
    ],
    "namespace": "randomIntBetween"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Return value if in the range, max if greater, min if lower",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 59,
                  "offset": 58
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 59,
              "offset": 58
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 59,
          "offset": 58
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The tested value",
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "value"
      },
      {
        "title": "param",
        "description": "The maximum value",
        "lineNumber": 3,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "number"
          }
        },
        "name": "max",
        "default": "1"
      },
      {
        "title": "param",
        "description": "The minimum value",
        "lineNumber": 4,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "number"
          }
        },
        "name": "min",
        "default": "0"
      },
      {
        "title": "return",
        "description": "value - A random interger between min and max or max if value isn't a number",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "function"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 7,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 8,
          "column": 0
        },
        "end": {
          "line": 10,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/utils/range.js",
      "code": "/**\n * Return value if in the range, max if greater, min if lower\n * @param {number} value - The tested value\n * @param {number} [max=1] - The maximum value\n * @param {number} [min=0] - The minimum value\n * @return {function} value - A random interger between min and max or max if value isn't a number\n */\nexport default function range(value, max=1, min=0) {\n    return isNaN(value) ? max : Math.min(Math.max(value, min), max)\n}\n"
    },
    "params": [
      {
        "name": "value",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The tested value",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 17,
                      "offset": 16
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 17,
                  "offset": 16
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 17,
              "offset": 16
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "number"
        }
      },
      {
        "name": "max",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The maximum value",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 18,
                      "offset": 17
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 18,
                  "offset": 17
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 18,
              "offset": 17
            }
          }
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "number"
          }
        },
        "default": "1"
      },
      {
        "name": "min",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The minimum value",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 18,
                      "offset": 17
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 18,
                  "offset": 17
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 18,
              "offset": 17
            }
          }
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "number"
          }
        },
        "default": "0"
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "value - A random interger between min and max or max if value isn't a number",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 77,
                      "offset": 76
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 77,
                  "offset": 76
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 77,
              "offset": 76
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "function"
        }
      }
    ],
    "name": "range",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "range"
      }
    ],
    "namespace": "range"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Execute callback at most once in wait time.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 44,
                  "offset": 43
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 44,
              "offset": 43
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 44,
          "offset": 43
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The callback function",
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "function"
        },
        "name": "callback"
      },
      {
        "title": "param",
        "description": "The waiting time in milliseconds",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "wait"
      },
      {
        "title": "param",
        "description": "Execute callback on first trigger",
        "lineNumber": 4,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "bool"
          }
        },
        "name": "leading",
        "default": "false"
      },
      {
        "title": "param",
        "description": "Execute callback wait time after last execution",
        "lineNumber": 5,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "bool"
          }
        },
        "name": "trailing",
        "default": "false"
      },
      {
        "title": "return",
        "description": "throttled - The throttled callback with cancel method",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "function"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 8,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 39,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/utils/throttle.js",
      "code": "/**\n * Execute callback at most once in wait time.\n * @param {function} callback - The callback function\n * @param {number} wait - The waiting time in milliseconds\n * @param {bool} [leading=false] - Execute callback on first trigger\n * @param {bool} [trailing=false] - Execute callback wait time after last execution\n * @return {function} throttled - The throttled callback with cancel method\n */\nexport default function throttle (callback, wait, leading=true, trailing=true) {\n    let last = 0, timeout\n\n    const applyCallback = function() {\n        timeout = null\n        last = leading ? performance.now() : 0\n        callback.call(this, ...arguments)\n    }\n\n    const throttled = function() {\n        let now = performance.now()\n\n        if (!last && !leading)\n            last = now\n\n        let remaining = wait - (now - last)\n\n        if (remaining < 0 || remaining > wait)\n            applyCallback.call(this, ...arguments)\n        else if (trailing && !timeout)\n            timeout = setTimeout(applyCallback.bind(this, arguments), remaining)\n\n        throttled.cancel = function () {\n            clearTimeout(timeout)\n            last = 0\n            timeout = null\n        }\n    }\n\n    return throttled\n}\n"
    },
    "params": [
      {
        "name": "callback",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The callback function",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 22,
                      "offset": 21
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 22,
                  "offset": 21
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 22,
              "offset": 21
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "function"
        }
      },
      {
        "name": "wait",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The waiting time in milliseconds",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 33,
                      "offset": 32
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 33,
                  "offset": 32
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 33,
              "offset": 32
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "number"
        }
      },
      {
        "name": "leading",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Execute callback on first trigger",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 34,
                      "offset": 33
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 34,
                  "offset": 33
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 34,
              "offset": 33
            }
          }
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "bool"
          }
        },
        "default": "false"
      },
      {
        "name": "trailing",
        "lineNumber": 5,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Execute callback wait time after last execution",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 48,
                      "offset": 47
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 48,
                  "offset": 47
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 48,
              "offset": 47
            }
          }
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "bool"
          }
        },
        "default": "false"
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "throttled - The throttled callback with cancel method",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 54,
                      "offset": 53
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 54,
                  "offset": 53
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 54,
              "offset": 53
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "function"
        }
      }
    ],
    "name": "throttle",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "throttle"
      }
    ],
    "namespace": "throttle"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Convert a transformation as object to a 2D matrix as object",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 60,
                  "offset": 59
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 60,
              "offset": 59
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 60,
          "offset": 59
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The transformation object",
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "transformation"
      },
      {
        "title": "return",
        "description": "matrix - The 2D matrix",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 49,
        "column": 0
      },
      "end": {
        "line": 53,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 54,
          "column": 0
        },
        "end": {
          "line": 82,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/utils/transformTo2DMatrix.js",
      "code": "function applyPropertyToMatrix (property, value, matrix) {\n    switch (property) {\n        case 'x':\n        matrix[4] += value\n        break\n\n        case 'y':\n        matrix[5] += value\n        break\n\n        case 'rotate':\n        let cosValue = Math.cos(value),\n        sinValue = Math.sin(value)\n        matrix[0] *= cosValue\n        matrix[1] += sinValue\n        matrix[2] -= sinValue\n        matrix[3] *= cosValue\n        break\n\n        case 'scale':\n        matrix[0] *= value\n        matrix[2] *= value\n        break\n\n        case 'scaleX':\n        matrix[0] *= value\n        break\n\n        case 'scaleY':\n        matrix[3] *= value\n        break\n\n        case 'skew':\n        let tanValue = Math.tan(value)\n        matrix[2] += tanValue\n        matrix[1] += tanValue\n        break\n\n        case 'skewX':\n        matrix[2] += Math.tan(value)\n        break\n\n        case 'skewY':\n        matrix[1] += Math.tan(value)\n        break\n    }\n}\n\n/**\n * Convert a transformation as object to a 2D matrix as object\n * @param {object} transformation - The transformation object\n * @return {Array} matrix - The 2D matrix\n */\nexport default function transformTo2DMatrix(transformation) {\n    let properties = Object.keys(transformation),\n        i          = properties.length,\n        matrix     = [\n                        1, 0,\n                        0, 1,\n                        0, 0\n                    ]\n\n    while(i--) {\n        let property = properties[i],\n            value    = transformation[property]\n\n        if (typeof value == 'object') {\n            let subProperties = Object.keys(value),\n                j             = subProperties.length\n\n            while (j--) {\n                let subProperty = subProperties[j]\n                applyPropertyToMatrix(property+subProperty.toUpperCase(), value[subProperty], matrix)\n            }\n        }\n        else {\n            applyPropertyToMatrix(property, value, matrix)\n        }\n    }\n\n    return matrix\n}\n"
    },
    "params": [
      {
        "name": "transformation",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The transformation object",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 26,
                      "offset": 25
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 26,
                  "offset": 25
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 26,
              "offset": 25
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "matrix - The 2D matrix",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 23,
                      "offset": 22
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 23,
                  "offset": 22
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 23,
              "offset": 22
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "name": "transformTo2DMatrix",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "transformTo2DMatrix"
      }
    ],
    "namespace": "transformTo2DMatrix"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Convert a transformation as object to a 3D matrix as object",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 60,
                  "offset": 59
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 60,
              "offset": 59
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 60,
          "offset": 59
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The transformation object",
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "transformation"
      },
      {
        "title": "return",
        "description": "matrix - The 3D matrix",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 84,
        "column": 0
      },
      "end": {
        "line": 88,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 89,
          "column": 0
        },
        "end": {
          "line": 118,
          "column": 1
        }
      },
      "file": "/Users/alex/Dev/Chirashi/chirashi/src/utils/transformTo3DMatrix.js",
      "code": "function applyPropertyToMatrix (property, value, matrix) {\n    switch (property) {\n        case 'x':\n        matrix[12] += value\n        break\n\n        case 'y':\n        matrix[13] += value\n        break\n\n        case 'z':\n        matrix[14] += value\n        break\n\n        case 'rotate':\n        let cosValue = Math.cos(value),\n        sinValue = Math.sin(value)\n        matrix[0] *= cosValue\n        matrix[1] += sinValue\n        matrix[4] -= sinValue\n        matrix[5] *= cosValue\n        break\n\n        case 'rotateX':\n        let cosValue2 = Math.cos(value),\n        sinValue2 = Math.sin(value)\n        matrix[5] *= cosValue2\n        matrix[6] += sinValue2\n        matrix[9] -= sinValue2\n        matrix[10] *= cosValue2\n        break\n\n        case 'rotateY':\n        let cosValue3 = Math.cos(value),\n        sinValue3 = Math.sin(value)\n        matrix[0] *= cosValue3\n        matrix[2] -= sinValue3\n        matrix[8] += sinValue3\n        matrix[10] *= cosValue3\n        break\n\n        case 'rotateZ':\n        let cosValue4 = Math.cos(value),\n        sinValue4 = Math.sin(value)\n        matrix[0] *= cosValue4\n        matrix[1] += sinValue4\n        matrix[4] -= sinValue4\n        matrix[5] *= cosValue4\n        break\n\n        case 'scale':\n        matrix[0] *= value\n        matrix[5] *= value\n        break\n\n        case 'scaleX':\n        matrix[0] *= value\n        break\n\n        case 'scaleY':\n        matrix[5] *= value\n        break\n\n        case 'scaleZ':\n        matrix[10] *= value\n        break\n\n        case 'skew':\n        let tanValue = Math.tan(value)\n        matrix[4] += tanValue\n        matrix[1] += tanValue\n        break\n\n        case 'skewX':\n        matrix[4] += Math.tan(value)\n        break\n\n        case 'skewY':\n        matrix[1] += Math.tan(value)\n        break\n    }\n}\n\n/**\n * Convert a transformation as object to a 3D matrix as object\n * @param {object} transformation - The transformation object\n * @return {Array} matrix - The 3D matrix\n */\nexport default function transformTo3DMatrix(transformation) {\n    let properties = Object.keys(transformation),\n        i          = properties.length,\n        matrix     = [\n                        1, 0, 0, 0,\n                        0, 1, 0, 0,\n                        0, 0, 1, 0,\n                        0, 0, 0, 1\n                    ]\n\n    while(i--) {\n        let property = properties[i],\n            value    = transformation[property]\n\n        if (typeof value == 'object') {\n            let subProperties = Object.keys(value),\n                j             = subProperties.length\n\n            while (j--) {\n                let subProperty = subProperties[j]\n                applyPropertyToMatrix(property+subProperty.toUpperCase(), value[subProperty], matrix)\n            }\n        }\n        else {\n            applyPropertyToMatrix(property, value, matrix)\n        }\n    }\n\n    return matrix\n}\n"
    },
    "params": [
      {
        "name": "transformation",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The transformation object",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 26,
                      "offset": 25
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 26,
                  "offset": 25
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 26,
              "offset": 25
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "matrix - The 3D matrix",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 23,
                      "offset": 22
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 23,
                  "offset": 22
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 23,
              "offset": 22
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "Array"
        }
      }
    ],
    "name": "transformTo3DMatrix",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "transformTo3DMatrix"
      }
    ],
    "namespace": "transformTo3DMatrix"
  }
]
