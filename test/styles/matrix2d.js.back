import assert from 'assert'
import Chirashi from '../../src'

window.describe('chirashi#matrix2d', () => {
  window.it('should be a function', () => {
    assert.equal(typeof Chirashi.matrix2d, 'function')
  })

  window.it('should return transform matrix from transformation', () => {
    const transform = Chirashi.prefix + 'Transform'

    const wasabiPea = document.createElement('p')
    wasabiPea.id = 'wasabi'

    Chirashi.matrix2d(wasabiPea, {})
    assert.equal(wasabiPea.style[transform].replace(/[\s]/g, ''), 'matrix(1,0,0,1,0,0)', 'should return identity matrix')

    Chirashi.matrix2d(wasabiPea, {x: 5, y: 6})
    assert.equal(wasabiPea.style[transform].replace(/[\s]/g, ''), 'matrix(1,0,0,1,5,6)', 'should support translation')

    Chirashi.matrix2d(wasabiPea, {scale: 2})
    assert.equal(wasabiPea.style[transform].replace(/[\s]/g, ''), 'matrix(2,0,0,2,0,0)', 'should support global scale')

    Chirashi.matrix2d(wasabiPea, {scaleX: 2, scaleY: 4})
    assert.equal(wasabiPea.style[transform].replace(/[\s]/g, ''), 'matrix(2,0,0,4,0,0)', 'should support different axes scale')

    Chirashi.matrix2d(wasabiPea, {scale: {x: 2, y: 4}})
    assert.equal(wasabiPea.style[transform].replace(/[\s]/g, ''), 'matrix(2,0,0,4,0,0)', 'should support different axes scale as object')

    Chirashi.matrix2d(wasabiPea, {rotate: 45})
    assert.equal(wasabiPea.style[transform].replace(/[\s]/g, ''), 'matrix(0.53,0.85,-0.85,0.53,0,0)', 'should support rotation in radians')

    Chirashi.matrix2d(wasabiPea, {skew: 45})
    assert.equal(wasabiPea.style[transform].replace(/[\s]/g, ''), 'matrix(1,1.62,1.62,1,0,0)', 'should support skew radians')

    Chirashi.matrix2d(wasabiPea, {skewX: 25, skewY: 45})
    assert.equal(wasabiPea.style[transform].replace(/[\s]/g, ''), 'matrix(1,1.62,-0.13,1,0,0)', 'should support different axes skew')

    Chirashi.matrix2d(wasabiPea, {skew: {x: 25, y: 45}})
    assert.equal(wasabiPea.style[transform].replace(/[\s]/g, ''), 'matrix(1,1.62,-0.13,1,0,0)', 'should support different axes skew as object')

    Chirashi.matrix2d(wasabiPea, {x: 5, y: 6, scale: {x: 2, y: 4}, rotate: 45, skew: {x: 25, y: 45}})
    assert.equal(wasabiPea.style[transform].replace(/[\s]/g, ''), 'matrix(1.05,2.47,-0.98,2.1,5,6)', 'should support all together')
  })

  // window.it('should return 3d transform matrix from transformation', () => {
  //   assert.ok(equalsArray([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], Chirashi.matrix2d({})), 'should return 3d identity matrix')
  //   assert.ok(equalsArray([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 5, 6, 7, 1], Chirashi.matrix2d({x: 5, y: 6, z: 7})), 'should support 3d translation')
  //   assert.ok(equalsArray([2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], Chirashi.matrix2d({scale: 2})), 'should support global 3d scale')
  //   assert.ok(equalsArray([2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 1], Chirashi.matrix2d({scaleX: 2, scaleY: 3, scaleZ: 4})), 'should support different axes 3d scale')
  //   assert.ok(equalsArray([2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 1], Chirashi.matrix2d({scale: {x: 2, y: 3, z: 4}})), 'should support different axes 3d scale as object')
  //   assert.ok(equalsArray([0.53, 0.85, 0, 0, -0.85, 0.53, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], Chirashi.matrix2d({rotate: 45})), 'should support 3d rotation in radians')
  //   assert.ok(equalsArray([-0.31, 0.65, -0.91, 0, -0.65, -0.4, 0.85, 0, 0.91, -0.85, 0.21, 0, 0, 0, 0, 1], Chirashi.matrix2d({rotateX: 45, rotateY: 20, rotateZ: 15})), 'should support different axes 3d rotation')
  //   assert.ok(equalsArray([-0.31, 0.65, -0.91, 0, -0.65, -0.4, 0.85, 0, 0.91, -0.85, 0.21, 0, 0, 0, 0, 1], Chirashi.matrix2d({rotate: {x: 45, y: 20, z: 15}})), 'should support different axes 3d rotation as object')
  //   assert.ok(equalsArray([1, 1.62, 0, 0, 1.62, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], Chirashi.matrix2d({skew: 45})), 'should support 3d skew radians')
  //   assert.ok(equalsArray([1, 1.62, 0, 0, -0.13, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], Chirashi.matrix2d({skewX: 25, skewY: 45})), 'should support different axes 3d skew')
  //   assert.ok(equalsArray([1, 1.62, 0, 0, -0.13, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], Chirashi.matrix2d({skew: {x: 25, y: 45}})), 'should support different axes 3d skew as object')
  //   assert.ok(equalsArray([-0.62, 2.27, -0.91, 0, -0.78, -1.2, 0.85, 0, 0.91, -0.85, 0.86, 0, 5, 6, 7, 1], Chirashi.matrix2d({x: 5, y: 6, z: 7, scale: {x: 2, y: 3, z: 4}, rotate: {x: 45, y: 20, z: 15}, skew: {x: 25, y: 45}})), 'should support 3d all together')
  // })
})
